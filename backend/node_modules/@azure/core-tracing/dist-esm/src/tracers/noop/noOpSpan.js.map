{"version":3,"file":"noOpSpan.js","sourceRoot":"","sources":["../../../../src/tracers/noop/noOpSpan.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAYlC;;GAEG;AACH,MAAM,OAAO,QAAQ;IACnB;;OAEG;IACH,WAAW;QACT,OAAO;YACL,MAAM,EAAE,EAAE;YACV,OAAO,EAAE,EAAE;YACX,UAAU,cAAiB;SAC5B,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,QAAiB;QACnB,UAAU;IACZ,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,IAAY,EAAE,MAAe;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,WAA2B;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,KAAa,EAAE,WAA4B;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,OAAmB;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,KAAa;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,eAAe,CAAC,UAAqB,EAAE,KAAiB;QACtD,gBAAgB;IAClB,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Span,\n  SpanContext,\n  SpanAttributes,\n  SpanStatus,\n  TraceFlags,\n  Exception,\n  TimeInput\n} from \"../../interfaces\";\n\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nexport class NoOpSpan implements Span {\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  spanContext(): SpanContext {\n    return {\n      spanId: \"\",\n      traceId: \"\",\n      traceFlags: TraceFlags.NONE\n    };\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime - The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    /* Noop */\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param _key - The attribute key\n   * @param _value - The attribute value\n   */\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param _attributes - The attributes to add\n   */\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param _name - The name of the event\n   * @param _attributes - The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n   * @param _status - The status to set.\n   */\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param _name - the new Span name\n   */\n  updateName(_name: string): this {\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    return false;\n  }\n\n  /**\n   * Sets exception as a span event\n   * @param exception - the exception the only accepted values are string or Error\n   * @param time - the time to set as Span's event time. If not provided,\n   *     use the current time.\n   */\n  recordException(_exception: Exception, _time?: TimeInput): void {\n    /* do nothing */\n  }\n}\n"]}