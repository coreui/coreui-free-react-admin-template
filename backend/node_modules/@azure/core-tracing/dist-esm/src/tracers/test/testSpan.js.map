{"version":3,"file":"testSpan.js","sourceRoot":"","sources":["../../../../src/tracers/test/testSpan.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAOL,cAAc,EAEf,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5C;;GAEG;AACH,MAAM,OAAO,QAAS,SAAQ,QAAQ;IAuCpC;;;;;;;;OAQG;IACH,YACE,YAAoB,EACpB,IAAY,EACZ,OAAoB,EACpB,IAAc,EACd,YAAqB,EACrB,YAAuB,IAAI,CAAC,GAAG,EAAE;QAEjC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG;YACZ,IAAI,EAAE,cAAc,CAAC,EAAE;SACxB,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,QAAiB;QACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,SAAS,CAAC,MAAkB;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,GAAW,EAAE,KAAyB;QACjD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,UAA0B;QACtC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;SACxC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TimeInput,\n  Tracer,\n  SpanKind,\n  SpanStatus,\n  SpanContext,\n  SpanAttributes,\n  SpanStatusCode,\n  SpanAttributeValue\n} from \"../../interfaces\";\nimport { NoOpSpan } from \"../noop/noOpSpan\";\n\n/**\n * A mock span useful for testing.\n */\nexport class TestSpan extends NoOpSpan {\n  /**\n   * The Span's current name\n   */\n  name: string;\n\n  /**\n   * The Span's current status\n   */\n  status: SpanStatus;\n\n  /**\n   * The Span's kind\n   */\n  kind: SpanKind;\n\n  /**\n   * True if end() has been called on the Span\n   */\n  endCalled: boolean;\n\n  /**\n   * The start time of the Span\n   */\n  readonly startTime: TimeInput;\n\n  /**\n   * The id of the parent Span, if any.\n   */\n  readonly parentSpanId?: string;\n\n  /**\n   * Known attributes, if any.\n   */\n  readonly attributes: SpanAttributes;\n\n  private _context: SpanContext;\n  private readonly _tracer: Tracer;\n\n  /**\n   * Starts a new Span.\n   * @param parentTracer-  The tracer that created this Span\n   * @param name - The name of the span.\n   * @param context - The SpanContext this span belongs to\n   * @param kind - The SpanKind of this Span\n   * @param parentSpanId - The identifier of the parent Span\n   * @param startTime - The startTime of the event (defaults to now)\n   */\n  constructor(\n    parentTracer: Tracer,\n    name: string,\n    context: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    startTime: TimeInput = Date.now()\n  ) {\n    super();\n    this._tracer = parentTracer;\n    this.name = name;\n    this.kind = kind;\n    this.startTime = startTime;\n    this.parentSpanId = parentSpanId;\n    this.status = {\n      code: SpanStatusCode.OK\n    };\n    this.endCalled = false;\n    this._context = context;\n    this.attributes = {};\n  }\n\n  /**\n   * Returns the Tracer that created this Span\n   */\n  tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  spanContext(): SpanContext {\n    return this._context;\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param _endTime - The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this.endCalled = true;\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n   * @param status - The status to set.\n   */\n  setStatus(status: SpanStatus): this {\n    this.status = status;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    return true;\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param key - The attribute key\n   * @param value - The attribute value\n   */\n  setAttribute(key: string, value: SpanAttributeValue): this {\n    this.attributes[key] = value;\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param attributes - The attributes to add\n   */\n  setAttributes(attributes: SpanAttributes): this {\n    for (const key of Object.keys(attributes)) {\n      this.attributes[key] = attributes[key];\n    }\n    return this;\n  }\n}\n"]}