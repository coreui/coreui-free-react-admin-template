{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../src/utils/cache.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE3C,yEAAyE;AACzE,2BAA2B;AAC3B,0CAA0C;AAC1C,sCAAsC;AACtC,MAAM,oBAAoB,GAAG,MAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAM5E,IAAI,KAAkB,CAAC;AAEvB,SAAS,eAAe;IACtB,MAAM,SAAS,GAAG,eAAe,EAAE,CAAC;IAEpC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE;QACpC,SAAS,CAAC,oBAAoB,CAAC,GAAG;YAChC,MAAM,EAAE,SAAS;SAClB,CAAC;KACH;IACD,KAAK,GAAG,SAAS,CAAC,oBAAoB,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,QAAQ;IACtB,IAAI,CAAC,KAAK,EAAE;QACV,eAAe,EAAE,CAAC;KACnB;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Tracer } from \"../interfaces\";\nimport { getGlobalObject } from \"./global\";\n\n// tracerCache will be updated when a new incompatible version of OTel is\n// shipped in core-tracing.\n// tracerCache3 - OpenTelemetry 1.0.0-rc.1\n// tracerCache4 - OpenTelemetry 0.20.0\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(`@azure/core-tracing.tracerCache4`);\n\nexport interface TracerCache {\n  tracer?: Tracer;\n}\n\nlet cache: TracerCache;\n\nfunction loadTracerCache(): void {\n  const globalObj = getGlobalObject();\n\n  if (!globalObj[GLOBAL_TRACER_SYMBOL]) {\n    globalObj[GLOBAL_TRACER_SYMBOL] = {\n      tracer: undefined\n    };\n  }\n  cache = globalObj[GLOBAL_TRACER_SYMBOL];\n}\n\nexport function getCache(): TracerCache {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}\n"]}