{"version":3,"file":"interactiveBrowserCredential.browser.js","sourceRoot":"","sources":["../../../src/credentials/interactiveBrowserCredential.browser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msal from \"msal\";\nimport { AccessToken, TokenCredential, GetTokenOptions } from \"@azure/core-auth\";\nimport {\n  BrowserLoginStyle,\n  InteractiveBrowserCredentialOptions\n} from \"./interactiveBrowserCredentialOptions\";\nimport { createSpan } from \"../util/tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { DefaultAuthorityHost, DefaultTenantId, DeveloperSignOnClientId } from \"../constants\";\nimport { credentialLogger, formatSuccess, formatError } from \"../util/logging\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow, either via browser redirects or a popup\n * window.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private loginStyle: BrowserLoginStyle;\n  private msalConfig: msal.Configuration;\n  private msalObject: msal.UserAgentApplication;\n\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(options?: InteractiveBrowserCredentialOptions) {\n    options = {\n      authorityHost: DefaultAuthorityHost,\n      ...options,\n      tenantId: (options && options.tenantId) || DefaultTenantId,\n      // TODO: temporary - this is the Azure CLI clientID - we'll replace it when\n      // Developer Sign On application is available\n      // https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/identity/Azure.Identity/src/Constants.cs#L9\n      clientId: (options && options.clientId) || DeveloperSignOnClientId\n    };\n\n    this.loginStyle = options.loginStyle || \"popup\";\n    if ([\"redirect\", \"popup\"].indexOf(this.loginStyle) === -1) {\n      const error = new Error(`Invalid loginStyle: ${options.loginStyle}`);\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const knownAuthorities =\n      options.tenantId === \"adfs\" ? (options.authorityHost ? [options.authorityHost] : []) : [];\n\n    this.msalConfig = {\n      auth: {\n        clientId: options.clientId!, // we just initialized it above\n        authority: `${options.authorityHost}/${options.tenantId}`,\n        knownAuthorities,\n        ...(options.redirectUri && { redirectUri: options.redirectUri }),\n        ...(options.postLogoutRedirectUri && { redirectUri: options.postLogoutRedirectUri })\n      },\n      cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: true\n      }\n    };\n\n    this.msalObject = new msal.UserAgentApplication(this.msalConfig);\n  }\n\n  private login(): Promise<msal.AuthResponse> {\n    switch (this.loginStyle) {\n      case \"redirect\": {\n        const loginPromise = new Promise<msal.AuthResponse>((resolve, reject) => {\n          this.msalObject.handleRedirectCallback(resolve, reject);\n        });\n        this.msalObject.loginRedirect();\n        return loginPromise;\n      }\n      case \"popup\":\n        return this.msalObject.loginPopup();\n    }\n  }\n\n  private async acquireToken(\n    authParams: msal.AuthenticationParameters\n  ): Promise<msal.AuthResponse | undefined> {\n    let authResponse: msal.AuthResponse | undefined;\n    try {\n      logger.info(\"Attempting to acquire token silently\");\n      authResponse = await this.msalObject.acquireTokenSilent(authParams);\n    } catch (err) {\n      if (err instanceof msal.AuthError) {\n        switch (err.errorCode) {\n          case \"consent_required\":\n          case \"interaction_required\":\n          case \"login_required\":\n            logger.info(`Authentication returned errorCode ${err.errorCode}`);\n            break;\n          default:\n            logger.info(formatError(authParams.scopes, `Failed to acquire token: ${err.message}`));\n            throw err;\n        }\n      }\n    }\n\n    let authPromise: Promise<msal.AuthResponse> | undefined;\n    if (authResponse === undefined) {\n      logger.info(\n        `Silent authentication failed, falling back to interactive method ${this.loginStyle}`\n      );\n      switch (this.loginStyle) {\n        case \"redirect\":\n          authPromise = new Promise((resolve, reject) => {\n            this.msalObject.handleRedirectCallback(resolve, reject);\n          });\n          this.msalObject.acquireTokenRedirect(authParams);\n          break;\n        case \"popup\":\n          authPromise = this.msalObject.acquireTokenPopup(authParams);\n          break;\n      }\n\n      authResponse = authPromise && (await authPromise);\n    }\n\n    return authResponse;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async getToken(\n    scopes: string | string[],\n    options?: GetTokenOptions\n  ): Promise<AccessToken | null> {\n    const { span } = createSpan(\"InteractiveBrowserCredential-getToken\", options);\n    try {\n      if (!this.msalObject.getAccount()) {\n        await this.login();\n      }\n\n      const authResponse = await this.acquireToken({\n        scopes: Array.isArray(scopes) ? scopes : scopes.split(\",\")\n      });\n\n      if (authResponse) {\n        const expiresOnTimestamp = authResponse.expiresOn.getTime();\n        logger.getToken.info(formatSuccess(scopes));\n        return {\n          token: authResponse.accessToken,\n          expiresOnTimestamp\n        };\n      } else {\n        logger.getToken.info(\"No response\");\n        return null;\n      }\n    } catch (err) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message\n      });\n      logger.getToken.info(formatError(scopes, err));\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}