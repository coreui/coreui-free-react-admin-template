{"version":3,"file":"cryptographyClientModels.js","sourceRoot":"","sources":["../../../src/cryptographyClientModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAIL,wBAAwB,IAAI,kBAAkB,EAC9C,iCAAiC,IAAI,wBAAwB,GAE9D,MAAM,oBAAoB,CAAC;AAE5B,OAAO,EAEL,kBAAkB,EAGlB,wBAAwB,GACzB,CAAC;AAEF,4EAA4E;AAC5E,MAAM,CAAN,IAAY,yBA+BX;AA/BD,WAAY,yBAAyB;IACnC,sCAAsC;IACtC,iDAAoB,CAAA;IACpB,0CAA0C;IAC1C,wDAA2B,CAAA;IAC3B,oCAAoC;IACpC,6CAAgB,CAAA;IAChB,qCAAqC;IACrC,gDAAmB,CAAA;IACnB,qCAAqC;IACrC,gDAAmB,CAAA;IACnB,qCAAqC;IACrC,gDAAmB,CAAA;IACnB,oCAAoC;IACpC,8CAAiB,CAAA;IACjB,oCAAoC;IACpC,8CAAiB,CAAA;IACjB,oCAAoC;IACpC,8CAAiB,CAAA;IACjB,qCAAqC;IACrC,gDAAmB,CAAA;IACnB,qCAAqC;IACrC,gDAAmB,CAAA;IACnB,qCAAqC;IACrC,gDAAmB,CAAA;IACnB,wCAAwC;IACxC,sDAAyB,CAAA;IACzB,wCAAwC;IACxC,sDAAyB,CAAA;IACzB,wCAAwC;IACxC,sDAAyB,CAAA;AAC3B,CAAC,EA/BW,yBAAyB,KAAzB,yBAAyB,QA+BpC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CryptographyOptions, KeyVaultKey } from \"./keysModels\";\n\nimport {\n  JsonWebKeyEncryptionAlgorithm as EncryptionAlgorithm,\n  JsonWebKey,\n  JsonWebKeyCurveName as KeyCurveName,\n  KnownJsonWebKeyCurveName as KnownKeyCurveNames,\n  KnownJsonWebKeySignatureAlgorithm as KnownSignatureAlgorithms,\n  JsonWebKeySignatureAlgorithm as SignatureAlgorithm,\n} from \"./generated/models\";\n\nexport {\n  KeyCurveName,\n  KnownKeyCurveNames,\n  EncryptionAlgorithm,\n  SignatureAlgorithm,\n  KnownSignatureAlgorithms,\n};\n\n/** Known values of {@link EncryptionAlgorithm} that the service accepts. */\nexport enum KnownEncryptionAlgorithms {\n  /** Encryption Algorithm - RSA-OAEP */\n  RSAOaep = \"RSA-OAEP\",\n  /** Encryption Algorithm - RSA-OAEP-256 */\n  RSAOaep256 = \"RSA-OAEP-256\",\n  /** Encryption Algorithm - RSA1_5 */\n  RSA15 = \"RSA1_5\",\n  /** Encryption Algorithm - A128GCM */\n  A128GCM = \"A128GCM\",\n  /** Encryption Algorithm - A192GCM */\n  A192GCM = \"A192GCM\",\n  /** Encryption Algorithm - A256GCM */\n  A256GCM = \"A256GCM\",\n  /** Encryption Algorithm - A128KW */\n  A128KW = \"A128KW\",\n  /** Encryption Algorithm - A192KW */\n  A192KW = \"A192KW\",\n  /** Encryption Algorithm - A256KW */\n  A256KW = \"A256KW\",\n  /** Encryption Algorithm - A128CBC */\n  A128CBC = \"A128CBC\",\n  /** Encryption Algorithm - A192CBC */\n  A192CBC = \"A192CBC\",\n  /** Encryption Algorithm - A256CBC */\n  A256CBC = \"A256CBC\",\n  /** Encryption Algorithm - A128CBCPAD */\n  A128Cbcpad = \"A128CBCPAD\",\n  /** Encryption Algorithm - A192CBCPAD */\n  A192Cbcpad = \"A192CBCPAD\",\n  /** Encryption Algorithm - A256CBCPAD */\n  A256Cbcpad = \"A256CBCPAD\",\n}\n\n/**\n * Supported algorithms for key wrapping/unwrapping\n */\nexport type KeyWrapAlgorithm =\n  | \"A128KW\"\n  | \"A192KW\"\n  | \"A256KW\"\n  | \"RSA-OAEP\"\n  | \"RSA-OAEP-256\"\n  | \"RSA1_5\";\n\n/**\n * Result of the {@link encrypt} operation.\n */\nexport interface EncryptResult {\n  /**\n   * Result of the {@link encrypt} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The {@link EncryptionAlgorithm} used to encrypt the data.\n   */\n  algorithm: EncryptionAlgorithm;\n  /**\n   * The ID of the Key Vault Key used to encrypt the data.\n   */\n  keyID?: string;\n  /**\n   * The initialization vector used for encryption.\n   */\n  iv?: Uint8Array;\n  /**\n   * The authentication tag resulting from encryption with a symmetric key including A128GCM, A192GCM, and A256GCM.\n   */\n  authenticationTag?: Uint8Array;\n  /**\n   * Additional data that is authenticated during decryption but not encrypted.\n   */\n  additionalAuthenticatedData?: Uint8Array;\n}\n\n/**\n * Result of the {@link wrap} operation.\n */\nexport interface WrapResult {\n  /**\n   * Result of the {@link wrap} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the Key Vault Key used to wrap the data.\n   */\n  keyID?: string;\n  /**\n   * The {@link EncryptionAlgorithm} used to wrap the data.\n   */\n  algorithm: KeyWrapAlgorithm;\n}\n\n/**\n * Result of the {@link unwrap} operation.\n */\nexport interface UnwrapResult {\n  /**\n   * Result of the {@link unwrap} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the Key Vault Key used to unwrap the data.\n   */\n  keyID?: string;\n  /**\n   * The {@link KeyWrapAlgorithm} used to unwrap the data.\n   */\n  algorithm: KeyWrapAlgorithm;\n}\n/**\n * Result of the {@link decrypt} operation.\n */\nexport interface DecryptResult {\n  /**\n   * Result of the {@link decrypt} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the Key Vault Key used to decrypt the encrypted data.\n   */\n  keyID?: string;\n  /**\n   * The {@link EncryptionAlgorithm} used to decrypt the encrypted data.\n   */\n  algorithm: EncryptionAlgorithm;\n}\n\n/**\n * Result of the {@link sign} operation.\n */\nexport interface SignResult {\n  /**\n   * Result of the {@link sign} operation in bytes.\n   */\n  result: Uint8Array;\n  /**\n   * The ID of the Key Vault Key used to sign the data.\n   */\n  keyID?: string;\n  /**\n   * The {@link EncryptionAlgorithm} used to sign the data.\n   */\n  algorithm: SignatureAlgorithm;\n}\n\n/**\n * Result of the {@link verify} operation.\n */\nexport interface VerifyResult {\n  /**\n   * Result of the {@link verify} operation in bytes.\n   */\n  result: boolean;\n  /**\n   * The ID of the Key Vault Key used to verify the data.\n   */\n  keyID?: string;\n}\n\n/**\n * Options for {@link encrypt}.\n */\nexport interface EncryptOptions extends CryptographyOptions {}\n\n/**\n * Options for {@link decrypt}.\n */\nexport interface DecryptOptions extends CryptographyOptions {}\n\n/**\n * Options for {@link sign}.\n */\nexport interface SignOptions extends CryptographyOptions {}\n\n/**\n * Options for {@link verify}.\n */\nexport interface VerifyOptions extends CryptographyOptions {}\n\n/**\n * Options for {@link verifyData}\n */\nexport interface VerifyDataOptions extends CryptographyOptions {}\n\n/**\n * Options for {@link wrapKey}.\n */\nexport interface WrapKeyOptions extends CryptographyOptions {}\n\n/**\n * Options for {@link unwrapKey}.\n */\nexport interface UnwrapKeyOptions extends CryptographyOptions {}\n\n/**\n * A union type representing all supported RSA encryption algorithms.\n */\nexport type RsaEncryptionAlgorithm = \"RSA1_5\" | \"RSA-OAEP\" | \"RSA-OAEP-256\";\n\n/**\n * Encryption parameters for RSA encryption algorithms.\n */\nexport interface RsaEncryptParameters {\n  /**\n   * The encryption algorithm to use.\n   */\n  algorithm: RsaEncryptionAlgorithm;\n  /**\n   * The plain text to encrypt.\n   */\n  plaintext: Uint8Array;\n}\n\n/**\n * A union type representing all supported AES-GCM encryption algorithms.\n */\nexport type AesGcmEncryptionAlgorithm = \"A128GCM\" | \"A192GCM\" | \"A256GCM\";\n\n/**\n * Encryption parameters for AES-GCM encryption algorithms.\n */\nexport interface AesGcmEncryptParameters {\n  /**\n   * The encryption algorithm to use.\n   */\n  algorithm: AesGcmEncryptionAlgorithm;\n  /**\n   * The plain text to encrypt.\n   */\n  plaintext: Uint8Array;\n  /**\n   * Optional data that is authenticated but not encrypted.\n   */\n  additionalAuthenticatedData?: Uint8Array;\n}\n\n/**\n * A union type representing all supported AES-CBC encryption algorithms.\n */\nexport type AesCbcEncryptionAlgorithm =\n  | \"A128CBC\"\n  | \"A192CBC\"\n  | \"A256CBC\"\n  | \"A128CBCPAD\"\n  | \"A192CBCPAD\"\n  | \"A256CBCPAD\";\n\n/**\n * Encryption parameters for AES-CBC encryption algorithms.\n */\nexport interface AesCbcEncryptParameters {\n  /**\n   * The encryption algorithm to use.\n   */\n  algorithm: AesCbcEncryptionAlgorithm;\n  /**\n   * The plain text to encrypt.\n   */\n  plaintext: Uint8Array;\n  /**\n   * The initialization vector used for encryption. If omitted we will attempt to generate an IV using crypto's `randomBytes` functionality.\n   * An error will be thrown if creating an IV fails, and you may recover by passing in your own cryptographically secure IV.\n   *\n   * When passing your own IV, make sure you use a cryptographically random, non-repeating IV.\n   */\n  iv?: Uint8Array;\n}\n\n/**\n * A type representing all currently supported encryption parameters as they apply to different encryption algorithms.\n */\nexport type EncryptParameters =\n  | RsaEncryptParameters\n  | AesGcmEncryptParameters\n  | AesCbcEncryptParameters;\n\n/**\n * Decryption parameters for RSA encryption algorithms.\n */\nexport interface RsaDecryptParameters {\n  /**\n   * The encryption algorithm to use.\n   */\n  algorithm: RsaEncryptionAlgorithm;\n  /**\n   * The ciphertext to decrypt.\n   */\n  ciphertext: Uint8Array;\n}\n\n/**\n * Decryption parameters for AES-GCM encryption algorithms.\n */\nexport interface AesGcmDecryptParameters {\n  /**\n   * The encryption algorithm to use.\n   */\n  algorithm: AesGcmEncryptionAlgorithm;\n  /**\n   * The ciphertext to decrypt.\n   */\n  ciphertext: Uint8Array;\n  /**\n   * The initialization vector (or nonce) generated during encryption.\n   */\n  iv: Uint8Array;\n  /**\n   * The authentication tag generated during encryption.\n   */\n  authenticationTag: Uint8Array;\n  /**\n   * Optional data that is authenticated but not encrypted.\n   */\n  additionalAuthenticatedData?: Uint8Array;\n}\n\n/**\n * Decryption parameters for AES-CBC encryption algorithms.\n */\nexport interface AesCbcDecryptParameters {\n  /**\n   * The encryption algorithm to use.\n   */\n  algorithm: AesCbcEncryptionAlgorithm;\n  /**\n   * The initialization vector used during encryption.\n   */\n  /**\n   * The ciphertext to decrypt. Microsoft recommends you not use CBC without first ensuring the integrity of the ciphertext using an HMAC, for example.\n   * See https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information.\n   */\n  ciphertext: Uint8Array;\n  /**\n   * The initialization vector generated during encryption.\n   */\n  iv: Uint8Array;\n}\n\n/**\n * A type representing all currently supported decryption parameters as they apply to different encryption algorithms.\n */\nexport type DecryptParameters =\n  | RsaDecryptParameters\n  | AesGcmDecryptParameters\n  | AesCbcDecryptParameters;\n\n/**\n * The various key types a {@link CryptographyClient} can hold.\n * The key may be an identifier (URL) to a KeyVault key, the actual KeyVault key,\n * or a local-only JsonWebKey.\n *\n * If an identifier is used, an attempt will be made to exchange it for a {@link KeyVaultKey} during the first operation call. If this attempt fails, the identifier\n * will become a remote-only identifier and the {@link CryptographyClient} will only be able to perform remote operations.\n */\nexport type CryptographyClientKey =\n  | {\n      kind: \"identifier\";\n      value: string;\n    }\n  | {\n      kind: \"remoteOnlyIdentifier\";\n      value: string;\n    }\n  | {\n      kind: \"KeyVaultKey\";\n      value: KeyVaultKey;\n    }\n  | {\n      kind: \"JsonWebKey\";\n      value: JsonWebKey;\n    };\n"]}