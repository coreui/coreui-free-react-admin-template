{"version":3,"file":"DeviceCodeClient.js","sources":["../../src/client/DeviceCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { Constants, GrantType } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\n\n/**\n * OAuth2.0 Device code client\n */\nexport class DeviceCodeClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Gets device code from device code endpoint, calls back to with device code response, and\n     * polls token endpoint to exchange device code for tokens\n     * @param request\n     */\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\n        request.deviceCodeCallback(deviceCodeResponse);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\n            request,\n            deviceCodeResponse);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response);\n        return await responseHandler.handleServerTokenResponse(\n            response,\n            this.authority,\n            reqTimestamp,\n            request\n        );\n    }\n\n    /**\n     * Creates device code request and executes http GET\n     * @param request\n     */\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\n        const queryString = this.createQueryString(request);\n        const headers = this.createTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes\n        };\n\n        return this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint);\n    }\n\n    /**\n     * Executes POST request to device code endpoint\n     * @param deviceCodeEndpoint\n     * @param queryString\n     * @param headers\n     */\n    private async executePostRequestToDeviceCodeEndpoint(\n        deviceCodeEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\n\n        const {\n            body: {\n                user_code: userCode,\n                device_code: deviceCode,\n                verification_uri: verificationUri,\n                expires_in: expiresIn,\n                interval,\n                message\n            }\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\n            thumbprint,\n            deviceCodeEndpoint,\n            {\n                body: queryString,\n                headers: headers\n            });\n\n        return {\n            userCode,\n            deviceCode,\n            verificationUri,\n            expiresIn,\n            interval,\n            message\n        };\n    }\n\n    /**\n     * Create device code endpoint query parameters and returns string\n     */\n    private createQueryString(request: CommonDeviceCodeRequest): string {\n\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addScopes(request.scopes);\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Breaks the polling with specific conditions.\n     * @param request CommonDeviceCodeRequest\n     * @param deviceCodeResponse DeviceCodeResponse\n     */\n    private continuePolling(\n        deviceCodeExpirationTime: number,\n        userSpecifiedTimeout?: number,\n        userSpecifiedCancelFlag?: boolean,\n    ): boolean {\n        if (userSpecifiedCancelFlag) {\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n            throw ClientAuthError.createDeviceCodeCancelledError();\n        } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\n            throw ClientAuthError.createUserTimeoutReachedError();\n        } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n            if (userSpecifiedTimeout) {\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\n            }\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\n            throw ClientAuthError.createDeviceCodeExpiredError();\n        }\n        return true;\n    }\n\n    /**\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\n     * response\n     * @param request\n     * @param deviceCodeResponse\n     */\n    private async acquireTokenWithDeviceCode(\n        request: CommonDeviceCodeRequest,\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\n\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\n\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n\n        /*\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\n         */\n        while (this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) {\n            const thumbprint: RequestThumbprint = {\n                clientId: this.config.authOptions.clientId,\n                authority: request.authority,\n                scopes: request.scopes\n            };\n            const response = await this.executePostToTokenEndpoint(\n                this.authority.tokenEndpoint,\n                requestBody,\n                headers,\n                thumbprint);\n\n            if (response.body && response.body.error === Constants.AUTHORIZATION_PENDING) {\n                // user authorization is pending. Sleep for polling interval and try again\n                this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\n  \n                await TimeUtils.delay(pollingIntervalMilli);\n            } else {\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n                return response.body;\n            }\n        }\n\n        /*\n         * The above code should've thrown by this point, but to satisfy TypeScript,\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\n         */\n        this.logger.error(\"Polling stopped for unknown reasons.\");\n        throw ClientAuthError.createDeviceCodeUnknownError();\n    }\n\n    /**\n     * Creates query parameters and converts to string.\n     * @param request\n     * @param deviceCodeResponse\n     */\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\n\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\n\n        requestParameters.addScopes(request.scopes);\n        requestParameters.addClientId(this.config.authOptions.clientId);\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        requestParameters.addCorrelationId(correlationId);\n        requestParameters.addClientInfo();\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\n        requestParameters.addThrottling();\n        \n        if (this.serverTelemetryManager) {\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return requestParameters.createQueryString();\n    }\n}\n"],"names":[],"mappings":"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"}