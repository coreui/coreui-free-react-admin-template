{"version":3,"file":"msal-node.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/utils/Constants.ts","../src/network/HttpClient.ts","../src/utils/NetworkUtils.ts","../src/config/Configuration.ts","../src/crypto/GuidGenerator.ts","../src/utils/EncodingUtils.ts","../src/crypto/PkceGenerator.ts","../src/crypto/CryptoProvider.ts","../src/cache/serializer/Deserializer.ts","../src/cache/serializer/Serializer.ts","../src/cache/NodeStorage.ts","../src/cache/TokenCache.ts","../src/packageMetadata.ts","../src/client/ClientApplication.ts","../src/client/PublicClientApplication.ts","../src/client/ClientAssertion.ts","../src/client/ConfidentialClientApplication.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * http methods\r\n */\r\nexport enum HttpMethod {\r\n    GET = \"get\",\r\n    POST = \"post\",\r\n}\r\n\r\n/**\r\n * Constant used for PKCE\r\n */\r\nexport const RANDOM_OCTET_SIZE = 32;\r\n\r\n/**\r\n * Constants used in PKCE\r\n */\r\nexport const Hash = {\r\n    SHA256: \"sha256\",\r\n};\r\n\r\n/**\r\n * Constants for encoding schemes\r\n */\r\nexport const CharSet = {\r\n    CV_CHARSET:\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\",\r\n};\r\n\r\n/**\r\n * Cache Constants\r\n */\r\nexport const CACHE = {\r\n    FILE_CACHE: \"fileCache\",\r\n    EXTENSION_LIB: \"extenstion_library\",\r\n};\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const Constants = {\r\n    MSAL_SKU: \"msal.js.node\",\r\n    JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\r\n};\r\n\r\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 600-699 Device Code Flow\r\n * 800-899 Auth Code Flow\r\n */\r\nexport enum ApiId {\r\n    acquireTokenSilent = 62,\r\n    acquireTokenByUsernamePassword = 371,\r\n    acquireTokenByDeviceCode = 671,\r\n    acquireTokenByClientCredential = 771,\r\n    acquireTokenByCode = 871,\r\n    acquireTokenByRefreshToken = 872\r\n}\r\n\r\n/**\r\n * JWT  constants\r\n */\r\nexport const JwtConstants = {\r\n    ALGORITHM: \"alg\",\r\n    RSA_256: \"RS256\",\r\n    X5T: \"x5t\", \r\n    X5C: \"x5c\",\r\n    AUDIENCE: \"aud\",\r\n    EXPIRATION_TIME: \"exp\",\r\n    ISSUER: \"iss\",\r\n    SUBJECT: \"sub\",\r\n    NOT_BEFORE: \"nbf\",\r\n    JWT_ID: \"jti\",\r\n};\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    INetworkModule,\r\n    NetworkRequestOptions,\r\n    NetworkResponse,\r\n} from \"@azure/msal-common\";\r\nimport { HttpMethod } from \"../utils/Constants\";\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/**\r\n * This class implements the API for network requests.\r\n */\r\nexport class HttpClient implements INetworkModule {\r\n\r\n    /**\r\n     * Http Get request\r\n     * @param url\r\n     * @param options\r\n     */\r\n    async sendGetRequestAsync<T>(\r\n        url: string,\r\n        options?: NetworkRequestOptions\r\n    ): Promise<NetworkResponse<T>> {\r\n        const request: AxiosRequestConfig = {\r\n            method: HttpMethod.GET,\r\n            url: url,\r\n            headers: options && options.headers,\r\n            validateStatus: () => true\r\n        };\r\n\r\n        const response = await axios(request);\r\n        return {\r\n            headers: response.headers,\r\n            body: response.data as T,\r\n            status: response.status,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Http Post request\r\n     * @param url\r\n     * @param options\r\n     */\r\n    async sendPostRequestAsync<T>(\r\n        url: string,\r\n        options?: NetworkRequestOptions\r\n    ): Promise<NetworkResponse<T>> {\r\n        const request: AxiosRequestConfig = {\r\n            method: HttpMethod.POST,\r\n            url: url,\r\n            data: (options && options.body) || \"\",\r\n            headers: options && options.headers,\r\n            validateStatus: () => true\r\n        };\r\n\r\n        const response = await axios(request);\r\n        return {\r\n            headers: response.headers,\r\n            body: response.data as T,\r\n            status: response.status,\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"@azure/msal-common\";\r\nimport { HttpClient } from \"../network/HttpClient\";\r\n\r\nexport class NetworkUtils {\r\n    /**\r\n     * Returns best compatible network client object.\r\n     */\r\n    static getNetworkClient(): INetworkModule {\r\n        return new HttpClient();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    LoggerOptions,\r\n    INetworkModule,\r\n    LogLevel,\r\n    ProtocolMode,\r\n    ICachePlugin, Constants\r\n} from \"@azure/msal-common\";\r\nimport { NetworkUtils } from \"../utils/NetworkUtils\";\r\n\r\n/**\r\n * - clientId               - Client id of the application.\r\n * - authority              - Url of the authority. If no value is set, defaults to https://login.microsoftonline.com/common.\r\n * - knownAuthorities       - Needed for Azure B2C and ADFS. All authorities that will be used in the client application. Only the host of the authority should be passed in.\r\n * - clientSecret           - Secret string that the application uses when requesting a token. Only used in confidential client applications. Can be created in the Azure app registration portal.\r\n * - clientAssertion        - Assertion string that the application uses when requesting a token. Only used in confidential client applications. Assertion should be of type urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\r\n * - clientCertificate      - Certificate that the application uses when requesting a token. Only used in confidential client applications. Requires hex encoded X.509 SHA-1 thumbprint of the certificiate, and the PEM encoded private key (string should contain -----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY----- )\r\n * - protocolMode           - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\r\n * @public\r\n */\r\nexport type NodeAuthOptions = {\r\n    clientId: string;\r\n    authority?: string;\r\n    clientSecret?: string;\r\n    clientAssertion?:string;\r\n    clientCertificate?: {\r\n        thumbprint: string,\r\n        privateKey: string,\r\n        x5c?: string\r\n    };\r\n    knownAuthorities?: Array<string>;\r\n    cloudDiscoveryMetadata?: string;\r\n    authorityMetadata?: string,\r\n    clientCapabilities?: [];\r\n    protocolMode?: ProtocolMode;\r\n};\r\n\r\n/**\r\n * Use this to configure the below cache configuration options:\r\n *\r\n * - cachePlugin   - Plugin for reading and writing token cache to disk.\r\n * @public\r\n */\r\nexport type CacheOptions = {\r\n    cachePlugin?: ICachePlugin;\r\n};\r\n\r\n/**\r\n * Type for configuring logger and http client options\r\n *\r\n * - logger                       - Used to initialize the Logger object; TODO: Expand on logger details or link to the documentation on logger\r\n * - networkClient                - Http client used for all http get and post calls. Defaults to using MSAL's default http client.\r\n * @public\r\n */\r\nexport type NodeSystemOptions = {\r\n    loggerOptions?: LoggerOptions;\r\n    networkClient?: INetworkModule;\r\n};\r\n\r\n/**\r\n * Use the configuration object to configure MSAL and initialize the client application object\r\n *\r\n * - auth: this is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\r\n * - cache: this is where you configure cache location\r\n * - system: this is where you can configure the network client, logger\r\n * @public\r\n */\r\nexport type Configuration = {\r\n    auth: NodeAuthOptions;\r\n    cache?: CacheOptions;\r\n    system?: NodeSystemOptions;\r\n};\r\n\r\nconst DEFAULT_AUTH_OPTIONS: NodeAuthOptions = {\r\n    clientId: \"\",\r\n    authority: Constants.DEFAULT_AUTHORITY,\r\n    clientSecret: \"\",\r\n    clientAssertion: \"\",\r\n    clientCertificate: {\r\n        thumbprint: \"\",\r\n        privateKey: \"\",\r\n        x5c: \"\"\r\n    },\r\n    knownAuthorities: [],\r\n    cloudDiscoveryMetadata: \"\",\r\n    authorityMetadata: \"\",\r\n    clientCapabilities: [],\r\n    protocolMode: ProtocolMode.AAD\r\n};\r\n\r\nconst DEFAULT_CACHE_OPTIONS: CacheOptions = {};\r\n\r\nconst DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\r\n    loggerCallback: (): void => {\r\n        // allow users to not set logger call back\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n};\r\n\r\nconst DEFAULT_SYSTEM_OPTIONS: NodeSystemOptions = {\r\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\r\n    networkClient: NetworkUtils.getNetworkClient(),\r\n};\r\n\r\n/**\r\n * Sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth - Authentication options\r\n * @param cache - Cache options\r\n * @param system - System options\r\n *\r\n * @returns Configuration\r\n * @public\r\n */\r\nexport function buildAppConfiguration({\r\n    auth,\r\n    cache,\r\n    system,\r\n}: Configuration): Configuration {\r\n    return {\r\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\r\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\r\n        system: { ...DEFAULT_SYSTEM_OPTIONS, ...system },\r\n    };\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport class GuidGenerator {\r\n    /**\r\n     *\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\r\n     * uuidv4 generates guids from cryprtographically-string random\r\n     */\r\n    static generateGuid(): string {\r\n        return uuidv4();\r\n    }\r\n\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    static isGuid(guid: string) {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport class EncodingUtils {\r\n    /**\r\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n     * 'base64': Base64 encoding.\r\n     *\r\n     * @param str text\r\n     */\r\n    static base64Encode(str: string, encoding?: BufferEncoding): string {\r\n        return Buffer.from(str, encoding).toString(\"base64\");\r\n    }\r\n\r\n    /**\r\n     * encode a URL\r\n     * @param str\r\n     */\r\n    static base64EncodeUrl(str: string, encoding?: BufferEncoding): string {\r\n        return EncodingUtils.base64Encode(str, encoding)\r\n            .replace(/=/g, \"\")\r\n            .replace(/\\+/g, \"-\")\r\n            .replace(/\\//g, \"_\");\r\n    }\r\n\r\n    /**\r\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n     * 'base64': Base64 encoding.\r\n     *\r\n     * @param base64Str Base64 encoded text\r\n     */\r\n    static base64Decode(base64Str: string): string {\r\n        return Buffer.from(base64Str, \"base64\").toString(\"utf8\");\r\n    }\r\n\r\n    /**\r\n     * @param base64Str Base64 encoded Url\r\n     */\r\n    static base64DecodeUrl(base64Str: string): string {\r\n        let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        while (str.length % 4) {\r\n            str += \"=\";\r\n        }\r\n        return EncodingUtils.base64Decode(str);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { PkceCodes } from \"@azure/msal-common\";\r\nimport { CharSet, Hash, RANDOM_OCTET_SIZE } from \"../utils/Constants\";\r\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\r\nimport crypto from \"crypto\";\r\n\r\n/**\r\n * https://tools.ietf.org/html/rfc7636#page-8\r\n */\r\nexport class PkceGenerator {\r\n    /**\r\n     * generates the codeVerfier and the challenge from the codeVerfier\r\n     * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\r\n     */\r\n    async generatePkceCodes(): Promise<PkceCodes> {\r\n        const verifier = this.generateCodeVerifier();\r\n        const challenge = this.generateCodeChallengeFromVerifier(verifier);\r\n        return { verifier, challenge };\r\n    }\r\n\r\n    /**\r\n     * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\r\n     */\r\n    private generateCodeVerifier(): string {\r\n        const buffer: Uint8Array = crypto.randomBytes(RANDOM_OCTET_SIZE);\r\n        const verifier: string = this.bufferToCVString(buffer);\r\n        return EncodingUtils.base64EncodeUrl(verifier);\r\n    }\r\n\r\n    /**\r\n     * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\r\n     * @param codeVerifier\r\n     */\r\n    private generateCodeChallengeFromVerifier(codeVerifier: string): string {\r\n        return EncodingUtils.base64EncodeUrl(\r\n            this.sha256(codeVerifier).toString(\"base64\"), \r\n            \"base64\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * generate 'SHA256' hash\r\n     * @param buffer\r\n     */\r\n    private sha256(buffer: string): Buffer {\r\n        return crypto\r\n            .createHash(Hash.SHA256)\r\n            .update(buffer)\r\n            .digest();\r\n    }\r\n\r\n    /**\r\n     * Accepted characters; reference: https://tools.ietf.org/html/rfc7636#section-4.1\r\n     * @param buffer\r\n     */\r\n    private bufferToCVString(buffer: Uint8Array): string {\r\n        const charArr = [];\r\n        for (let i = 0; i < buffer.byteLength; i += 1) {\r\n            const index = buffer[i] % CharSet.CV_CHARSET.length;\r\n            charArr.push(CharSet.CV_CHARSET[index]);\r\n        }\r\n        return charArr.join(\"\");\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, PkceCodes } from \"@azure/msal-common\";\r\nimport { GuidGenerator } from \"./GuidGenerator\";\r\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\r\nimport { PkceGenerator } from \"./PkceGenerator\";\r\n\r\n/**\r\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n * @public\r\n */\r\nexport class CryptoProvider implements ICrypto {\r\n    private pkceGenerator: PkceGenerator;\r\n\r\n    constructor() {\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.pkceGenerator = new PkceGenerator();\r\n    }\r\n\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid(): string {\r\n        return GuidGenerator.generateGuid();\r\n    }\r\n\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input - string to be encoded\r\n     */\r\n    base64Encode(input: string): string {\r\n        return EncodingUtils.base64Encode(input);\r\n    }\r\n\r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input - string to be decoded\r\n     */\r\n    base64Decode(input: string): string {\r\n        return EncodingUtils.base64Decode(input);\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    generatePkceCodes(): Promise<PkceCodes> {\r\n        return this.pkceGenerator.generatePkceCodes();\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\r\n     */\r\n    getPublicKeyThumbprint(): Promise<string> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\r\n     */\r\n    signJwt(): Promise<string> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils, AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager } from \"@azure/msal-common\";\r\nimport { JsonCache, InMemoryCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\r\n\r\n/**\r\n * This class deserializes cache entities read from the file into in memory object types defined internally\r\n */\r\nexport class Deserializer {\r\n    /**\r\n     * Parse the JSON blob in memory and deserialize the content\r\n     * @param cachedJson\r\n     */\r\n    static deserializeJSONBlob(jsonFile: string): JsonCache {\r\n        const deserializedCache = StringUtils.isEmpty(jsonFile)\r\n            ? {}\r\n            : JSON.parse(jsonFile);\r\n        return deserializedCache;\r\n    }\r\n\r\n    /**\r\n     * Deserializes accounts to AccountEntity objects\r\n     * @param accounts\r\n     */\r\n    static deserializeAccounts(accounts: Record<string, SerializedAccountEntity>): AccountCache {\r\n        const accountObjects: AccountCache = {};\r\n        if (accounts) {\r\n            Object.keys(accounts).map(function (key) {\r\n                const serializedAcc = accounts[key];\r\n                const mappedAcc = {\r\n                    homeAccountId: serializedAcc.home_account_id,\r\n                    environment: serializedAcc.environment,\r\n                    realm: serializedAcc.realm,\r\n                    localAccountId: serializedAcc.local_account_id,\r\n                    username: serializedAcc.username,\r\n                    authorityType: serializedAcc.authority_type,\r\n                    name: serializedAcc.name,\r\n                    clientInfo: serializedAcc.client_info,\r\n                    lastModificationTime: serializedAcc.last_modification_time,\r\n                    lastModificationApp: serializedAcc.last_modification_app,\r\n                };\r\n                const account: AccountEntity = new AccountEntity();\r\n                CacheManager.toObject(account, mappedAcc);\r\n                accountObjects[key] = account;\r\n            });\r\n        }\r\n\r\n        return accountObjects;\r\n    }\r\n\r\n    /**\r\n     * Deserializes id tokens to IdTokenEntity objects\r\n     * @param idTokens\r\n     */\r\n    static deserializeIdTokens(idTokens: Record<string, SerializedIdTokenEntity>): IdTokenCache {\r\n        const idObjects: IdTokenCache = {};\r\n        if (idTokens) {\r\n            Object.keys(idTokens).map(function (key) {\r\n                const serializedIdT = idTokens[key];\r\n                const mappedIdT = {\r\n                    homeAccountId: serializedIdT.home_account_id,\r\n                    environment: serializedIdT.environment,\r\n                    credentialType: serializedIdT.credential_type,\r\n                    clientId: serializedIdT.client_id,\r\n                    secret: serializedIdT.secret,\r\n                    realm: serializedIdT.realm,\r\n                };\r\n                const idToken: IdTokenEntity = new IdTokenEntity();\r\n                CacheManager.toObject(idToken, mappedIdT);\r\n                idObjects[key] = idToken;\r\n            });\r\n        }\r\n        return idObjects;\r\n    }\r\n\r\n    /**\r\n     * Deserializes access tokens to AccessTokenEntity objects\r\n     * @param accessTokens\r\n     */\r\n    static deserializeAccessTokens(accessTokens: Record<string, SerializedAccessTokenEntity>): AccessTokenCache {\r\n        const atObjects: AccessTokenCache = {};\r\n        if (accessTokens) {\r\n            Object.keys(accessTokens).map(function (key) {\r\n                const serializedAT = accessTokens[key];\r\n                const mappedAT = {\r\n                    homeAccountId: serializedAT.home_account_id,\r\n                    environment: serializedAT.environment,\r\n                    credentialType: serializedAT.credential_type,\r\n                    clientId: serializedAT.client_id,\r\n                    secret: serializedAT.secret,\r\n                    realm: serializedAT.realm,\r\n                    target: serializedAT.target,\r\n                    cachedAt: serializedAT.cached_at,\r\n                    expiresOn: serializedAT.expires_on,\r\n                    extendedExpiresOn: serializedAT.extended_expires_on,\r\n                    refreshOn: serializedAT.refresh_on,\r\n                    keyId: serializedAT.key_id,\r\n                    tokenType: serializedAT.token_type,\r\n                };\r\n                const accessToken: AccessTokenEntity = new AccessTokenEntity();\r\n                CacheManager.toObject(accessToken, mappedAT);\r\n                atObjects[key] = accessToken;\r\n            });\r\n        }\r\n\r\n        return atObjects;\r\n    }\r\n\r\n    /**\r\n     * Deserializes refresh tokens to RefreshTokenEntity objects\r\n     * @param refreshTokens\r\n     */\r\n    static deserializeRefreshTokens(refreshTokens: Record<string, SerializedRefreshTokenEntity>): RefreshTokenCache {\r\n        const rtObjects: RefreshTokenCache = {};\r\n        if (refreshTokens) {\r\n            Object.keys(refreshTokens).map(function (key) {\r\n                const serializedRT = refreshTokens[key];\r\n                const mappedRT = {\r\n                    homeAccountId: serializedRT.home_account_id,\r\n                    environment: serializedRT.environment,\r\n                    credentialType: serializedRT.credential_type,\r\n                    clientId: serializedRT.client_id,\r\n                    secret: serializedRT.secret,\r\n                    familyId: serializedRT.family_id,\r\n                    target: serializedRT.target,\r\n                    realm: serializedRT.realm,\r\n                };\r\n                const refreshToken: RefreshTokenEntity = new RefreshTokenEntity();\r\n                CacheManager.toObject(refreshToken, mappedRT);\r\n                rtObjects[key] = refreshToken;\r\n            });\r\n        }\r\n\r\n        return rtObjects;\r\n    }\r\n\r\n    /**\r\n     * Deserializes appMetadata to AppMetaData objects\r\n     * @param appMetadata\r\n     */\r\n    static deserializeAppMetadata(appMetadata: Record<string, SerializedAppMetadataEntity>): AppMetadataCache {\r\n        const appMetadataObjects: AppMetadataCache = {};\r\n        if (appMetadata) {\r\n            Object.keys(appMetadata).map(function (key) {\r\n                const serializedAmdt = appMetadata[key];\r\n                const mappedAmd = {\r\n                    clientId: serializedAmdt.client_id,\r\n                    environment: serializedAmdt.environment,\r\n                    familyId: serializedAmdt.family_id,\r\n                };\r\n                const amd: AppMetadataEntity = new AppMetadataEntity();\r\n                CacheManager.toObject(amd, mappedAmd);\r\n                appMetadataObjects[key] = amd;\r\n            });\r\n        }\r\n\r\n        return appMetadataObjects;\r\n    }\r\n\r\n    /**\r\n     * Deserialize an inMemory Cache\r\n     * @param jsonCache\r\n     */\r\n    static deserializeAllCache(jsonCache: JsonCache): InMemoryCache {\r\n        return {\r\n            accounts: jsonCache.Account\r\n                ? this.deserializeAccounts(jsonCache.Account)\r\n                : {},\r\n            idTokens: jsonCache.IdToken\r\n                ? this.deserializeIdTokens(jsonCache.IdToken)\r\n                : {},\r\n            accessTokens: jsonCache.AccessToken\r\n                ? this.deserializeAccessTokens(jsonCache.AccessToken)\r\n                : {},\r\n            refreshTokens: jsonCache.RefreshToken\r\n                ? this.deserializeRefreshTokens(jsonCache.RefreshToken)\r\n                : {},\r\n            appMetadata: jsonCache.AppMetadata\r\n                ? this.deserializeAppMetadata(jsonCache.AppMetadata)\r\n                : {},\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache } from \"@azure/msal-common\";\r\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\r\n\r\nexport class Serializer {\r\n    /**\r\n     * serialize the JSON blob\r\n     * @param data\r\n     */\r\n    static serializeJSONBlob(data: JsonCache): string {\r\n        return JSON.stringify(data);\r\n    }\r\n\r\n    /**\r\n     * Serialize Accounts\r\n     * @param accCache\r\n     */\r\n    static serializeAccounts(accCache: AccountCache): Record<string, SerializedAccountEntity> {\r\n        const accounts: Record<string, SerializedAccountEntity> = {};\r\n        Object.keys(accCache).map(function (key) {\r\n            const accountEntity = accCache[key];\r\n            accounts[key] = {\r\n                home_account_id: accountEntity.homeAccountId,\r\n                environment: accountEntity.environment,\r\n                realm: accountEntity.realm,\r\n                local_account_id: accountEntity.localAccountId,\r\n                username: accountEntity.username,\r\n                authority_type: accountEntity.authorityType,\r\n                name: accountEntity.name,\r\n                client_info: accountEntity.clientInfo,\r\n                last_modification_time: accountEntity.lastModificationTime,\r\n                last_modification_app: accountEntity.lastModificationApp,\r\n            };\r\n        });\r\n\r\n        return accounts;\r\n    }\r\n\r\n    /**\r\n     * Serialize IdTokens\r\n     * @param idTCache\r\n     */\r\n    static serializeIdTokens(idTCache: IdTokenCache): Record<string, SerializedIdTokenEntity> {\r\n        const idTokens: Record<string, SerializedIdTokenEntity> = {};\r\n        Object.keys(idTCache).map(function (key) {\r\n            const idTEntity = idTCache[key];\r\n            idTokens[key] = {\r\n                home_account_id: idTEntity.homeAccountId,\r\n                environment: idTEntity.environment,\r\n                credential_type: idTEntity.credentialType,\r\n                client_id: idTEntity.clientId,\r\n                secret: idTEntity.secret,\r\n                realm: idTEntity.realm,\r\n            };\r\n        });\r\n\r\n        return idTokens;\r\n    }\r\n\r\n    /**\r\n     * Serializes AccessTokens\r\n     * @param atCache\r\n     */\r\n    static serializeAccessTokens(atCache: AccessTokenCache): Record<string, SerializedAccessTokenEntity> {\r\n        const accessTokens: Record<string, SerializedAccessTokenEntity> = {};\r\n        Object.keys(atCache).map(function (key) {\r\n            const atEntity = atCache[key];\r\n            accessTokens[key] = {\r\n                home_account_id: atEntity.homeAccountId,\r\n                environment: atEntity.environment,\r\n                credential_type: atEntity.credentialType,\r\n                client_id: atEntity.clientId,\r\n                secret: atEntity.secret,\r\n                realm: atEntity.realm,\r\n                target: atEntity.target,\r\n                cached_at: atEntity.cachedAt,\r\n                expires_on: atEntity.expiresOn,\r\n                extended_expires_on: atEntity.extendedExpiresOn,\r\n                refresh_on: atEntity.refreshOn,\r\n                key_id: atEntity.keyId,\r\n                token_type: atEntity.tokenType,\r\n            };\r\n        });\r\n\r\n        return accessTokens;\r\n    }\r\n\r\n    /**\r\n     * Serialize refreshTokens\r\n     * @param rtCache\r\n     */\r\n    static serializeRefreshTokens(rtCache: RefreshTokenCache): Record<string, SerializedRefreshTokenEntity> {\r\n        const refreshTokens: Record<string, SerializedRefreshTokenEntity> = {};\r\n        Object.keys(rtCache).map(function (key) {\r\n            const rtEntity = rtCache[key];\r\n            refreshTokens[key] = {\r\n                home_account_id: rtEntity.homeAccountId,\r\n                environment: rtEntity.environment,\r\n                credential_type: rtEntity.credentialType,\r\n                client_id: rtEntity.clientId,\r\n                secret: rtEntity.secret,\r\n                family_id: rtEntity.familyId,\r\n                target: rtEntity.target,\r\n                realm: rtEntity.realm\r\n            };\r\n        });\r\n\r\n        return refreshTokens;\r\n    }\r\n\r\n    /**\r\n     * Serialize amdtCache\r\n     * @param amdtCache\r\n     */\r\n    static serializeAppMetadata(amdtCache: AppMetadataCache): Record<string, SerializedAppMetadataEntity> {\r\n        const appMetadata: Record<string, SerializedAppMetadataEntity> = {};\r\n        Object.keys(amdtCache).map(function (key) {\r\n            const amdtEntity = amdtCache[key];\r\n            appMetadata[key] = {\r\n                client_id: amdtEntity.clientId,\r\n                environment: amdtEntity.environment,\r\n                family_id: amdtEntity.familyId,\r\n            };\r\n        });\r\n\r\n        return appMetadata;\r\n    }\r\n\r\n    /**\r\n     * Serialize the cache\r\n     * @param jsonContent\r\n     */\r\n    static serializeAllCache(inMemCache: InMemoryCache): JsonCache {\r\n        return {\r\n            Account: this.serializeAccounts(inMemCache.accounts),\r\n            IdToken: this.serializeIdTokens(inMemCache.idTokens),\r\n            AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\r\n            RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\r\n            AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata),\r\n        };\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AccountEntity,\r\n    IdTokenEntity,\r\n    AccessTokenEntity,\r\n    RefreshTokenEntity,\r\n    AppMetadataEntity,\r\n    ServerTelemetryEntity,\r\n    ThrottlingEntity,\r\n    CacheManager,\r\n    Logger,\r\n    ValidCacheType,\r\n    ICrypto,\r\n    AuthorityMetadataEntity\r\n} from \"@azure/msal-common\";\r\nimport { Deserializer } from \"./serializer/Deserializer\";\r\nimport { Serializer } from \"./serializer/Serializer\";\r\nimport { InMemoryCache, JsonCache, CacheKVStore } from \"./serializer/SerializerTypes\";\r\n\r\n/**\r\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\r\n * @public\r\n */\r\nexport class NodeStorage extends CacheManager {\r\n    // Cache configuration, either set by user or default values.\r\n    private logger: Logger;\r\n    private cache: CacheKVStore = {};\r\n    private changeEmitters: Array<Function> = [];\r\n\r\n    constructor(logger: Logger, clientId: string, cryptoImpl: ICrypto) {\r\n        super(clientId, cryptoImpl);\r\n        this.logger = logger;\r\n    }\r\n\r\n    /**\r\n     * Queue up callbacks\r\n     * @param func - a callback function for cache change indication\r\n     */\r\n    registerChangeEmitter(func: () => void): void {\r\n        this.changeEmitters.push(func);\r\n    }\r\n\r\n    /**\r\n     * Invoke the callback when cache changes\r\n     */\r\n    emitChange(): void {\r\n        this.changeEmitters.forEach(func => func.call(null));\r\n    }\r\n\r\n    /**\r\n     * Converts cacheKVStore to InMemoryCache\r\n     * @param cache - key value store\r\n     */\r\n    cacheToInMemoryCache(cache: CacheKVStore): InMemoryCache {\r\n\r\n        const inMemoryCache: InMemoryCache = {\r\n            accounts: {},\r\n            idTokens: {},\r\n            accessTokens: {},\r\n            refreshTokens: {},\r\n            appMetadata: {},\r\n        };\r\n\r\n        for (const key in cache) {\r\n            if (cache[key as string] instanceof AccountEntity) {\r\n                inMemoryCache.accounts[key] = cache[key] as AccountEntity;\r\n            } else if (cache[key] instanceof IdTokenEntity) {\r\n                inMemoryCache.idTokens[key] = cache[key] as IdTokenEntity;\r\n            } else if (cache[key] instanceof AccessTokenEntity) {\r\n                inMemoryCache.accessTokens[key] = cache[key] as AccessTokenEntity;\r\n            } else if (cache[key] instanceof RefreshTokenEntity) {\r\n                inMemoryCache.refreshTokens[key] = cache[key] as RefreshTokenEntity;\r\n            } else if (cache[key] instanceof AppMetadataEntity) {\r\n                inMemoryCache.appMetadata[key] = cache[key] as AppMetadataEntity;\r\n            } else {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        return inMemoryCache;\r\n    }\r\n\r\n    /**\r\n     * converts inMemoryCache to CacheKVStore\r\n     * @param inMemoryCache - kvstore map for inmemory\r\n     */\r\n    inMemoryCacheToCache(inMemoryCache: InMemoryCache): CacheKVStore {\r\n        // convert in memory cache to a flat Key-Value map\r\n        let cache = this.getCache();\r\n\r\n        cache = {\r\n            ...inMemoryCache.accounts,\r\n            ...inMemoryCache.idTokens,\r\n            ...inMemoryCache.accessTokens,\r\n            ...inMemoryCache.refreshTokens,\r\n            ...inMemoryCache.appMetadata\r\n        };\r\n        return cache;\r\n    }\r\n\r\n    /**\r\n     * gets the current in memory cache for the client\r\n     */\r\n    getInMemoryCache(): InMemoryCache {\r\n        this.logger.verbose(\"Getting in-memory cache\");\r\n\r\n        // convert the cache key value store to inMemoryCache\r\n        const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\r\n        return inMemoryCache;\r\n    }\r\n\r\n    /**\r\n     * sets the current in memory cache for the client\r\n     * @param inMemoryCache - key value map in memory\r\n     */\r\n    setInMemoryCache(inMemoryCache: InMemoryCache): void{\r\n        this.logger.verbose(\"Setting in-memory cache\");\r\n\r\n        // convert and append the inMemoryCache to cacheKVStore\r\n        const cache = this.inMemoryCacheToCache(inMemoryCache);\r\n        this.setCache(cache);\r\n\r\n        this.emitChange();\r\n    }\r\n\r\n    /**\r\n     * get the current cache key-value store\r\n     */\r\n    getCache(): CacheKVStore {\r\n        this.logger.verbose(\"Getting cache key-value store\");\r\n        return this.cache;\r\n    }\r\n\r\n    /**\r\n     * sets the current cache (key value store)\r\n     * @param cacheMap - key value map\r\n     */\r\n    setCache(cache: CacheKVStore): void {\r\n        this.logger.verbose(\"Setting cache key value store\");\r\n        this.cache = cache;\r\n\r\n        // mark change in cache\r\n        this.emitChange();\r\n    }\r\n\r\n    /**\r\n     * Gets cache item with given key.\r\n     * @param key - lookup key for the cache entry\r\n     */\r\n    getItem(key: string): ValidCacheType {\r\n        this.logger.verbosePii(`Item key: ${key}`);\r\n\r\n        // read cache\r\n        const cache = this.getCache();\r\n        return cache[key];\r\n    }\r\n\r\n    /**\r\n     * Gets cache item with given key-value\r\n     * @param key - lookup key for the cache entry\r\n     * @param value - value of the cache entry\r\n     */\r\n    setItem(key: string, value: ValidCacheType): void {\r\n        this.logger.verbosePii(`Item key: ${key}`);\r\n\r\n        // read cache\r\n        const cache = this.getCache();\r\n        cache[key] = value;\r\n\r\n        // write to cache\r\n        this.setCache(cache);\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity\r\n     * @param accountKey - lookup key to fetch cache type AccountEntity\r\n     */\r\n    getAccount(accountKey: string): AccountEntity | null {\r\n        const account = this.getItem(accountKey) as AccountEntity;\r\n        if (AccountEntity.isAccountEntity(account)) {\r\n            return account;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set account entity\r\n     * @param account - cache value to be set of type AccountEntity\r\n     */\r\n    setAccount(account: AccountEntity): void {\r\n        const accountKey = account.generateAccountKey();\r\n        this.setItem(accountKey, account);\r\n    }\r\n\r\n    /**\r\n     * fetch the idToken credential\r\n     * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\r\n     */\r\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\r\n        const idToken = this.getItem(idTokenKey) as IdTokenEntity;\r\n        if (IdTokenEntity.isIdTokenEntity(idToken)) {\r\n            return idToken;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set idToken credential\r\n     * @param idToken - cache value to be set of type IdTokenEntity\r\n     */\r\n    setIdTokenCredential(idToken: IdTokenEntity): void {\r\n        const idTokenKey = idToken.generateCredentialKey();\r\n        this.setItem(idTokenKey, idToken);\r\n    }\r\n\r\n    /**\r\n     * fetch the accessToken credential\r\n     * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\r\n     */\r\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\r\n        const accessToken = this.getItem(accessTokenKey) as AccessTokenEntity;\r\n        if (AccessTokenEntity.isAccessTokenEntity(accessToken)) {\r\n            return accessToken;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set accessToken credential\r\n     * @param accessToken -  cache value to be set of type AccessTokenEntity\r\n     */\r\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\r\n        const accessTokenKey = accessToken.generateCredentialKey();\r\n        this.setItem(accessTokenKey, accessToken);\r\n    }\r\n\r\n    /**\r\n     * fetch the refreshToken credential\r\n     * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\r\n     */\r\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\r\n        const refreshToken = this.getItem(refreshTokenKey) as RefreshTokenEntity;\r\n        if (RefreshTokenEntity.isRefreshTokenEntity(refreshToken)) {\r\n            return refreshToken as RefreshTokenEntity;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set refreshToken credential\r\n     * @param refreshToken - cache value to be set of type RefreshTokenEntity\r\n     */\r\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\r\n        const refreshTokenKey = refreshToken.generateCredentialKey();\r\n        this.setItem(refreshTokenKey, refreshToken);\r\n    }\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\r\n     */\r\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\r\n        const appMetadata: AppMetadataEntity = this.getItem(appMetadataKey) as AppMetadataEntity;\r\n        if (AppMetadataEntity.isAppMetadataEntity(appMetadataKey, appMetadata)) {\r\n            return appMetadata;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata - cache value to be set of type AppMetadataEntity\r\n     */\r\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\r\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\r\n        this.setItem(appMetadataKey, appMetadata);\r\n    }\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\r\n     */\r\n    getServerTelemetry(serverTelemetrykey: string): ServerTelemetryEntity | null {\r\n        const serverTelemetryEntity: ServerTelemetryEntity = this.getItem(serverTelemetrykey) as ServerTelemetryEntity;\r\n        if (serverTelemetryEntity && ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\r\n            return serverTelemetryEntity;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\r\n     * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\r\n     */\r\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\r\n        this.setItem(serverTelemetryKey, serverTelemetry);\r\n    }\r\n\r\n    /**\r\n     * fetch authority metadata entity from the platform cache\r\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n     */\r\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\r\n        const authorityMetadataEntity: AuthorityMetadataEntity = this.getItem(key) as AuthorityMetadataEntity;\r\n        if (authorityMetadataEntity && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\r\n            return authorityMetadataEntity;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get all authority metadata keys\r\n     */\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        return this.getKeys().filter((key) => {\r\n            return this.isAuthorityMetadata(key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set authority metadata entity to the platform cache\r\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n     * @param metadata - cache value to be set of type AuthorityMetadataEntity\r\n     */\r\n    setAuthorityMetadata(key: string, metadata: AuthorityMetadataEntity): void {\r\n        this.setItem(key, metadata);\r\n    }\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n     */\r\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\r\n        const throttlingCache: ThrottlingEntity = this.getItem(throttlingCacheKey) as ThrottlingEntity;\r\n        if (throttlingCache && ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\r\n            return throttlingCache;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n     * @param throttlingCache - cache value to be set of type ThrottlingEntity\r\n     */\r\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\r\n        this.setItem(throttlingCacheKey, throttlingCache);\r\n    }\r\n\r\n    /**\r\n     * Removes the cache item from memory with the given key.\r\n     * @param key - lookup key to remove a cache entity\r\n     * @param inMemory - key value map of the cache\r\n     */\r\n    removeItem(key: string): boolean {\r\n        this.logger.verbosePii(`Item key: ${key}`);\r\n\r\n        // read inMemoryCache\r\n        let result: boolean = false;\r\n        const cache = this.getCache();\r\n\r\n        if (!!cache[key]) {\r\n            delete cache[key];\r\n            result = true;\r\n        }\r\n\r\n        // write to the cache after removal\r\n        if (result) {\r\n            this.setCache(cache);\r\n            this.emitChange();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key - look up key for a cache entity\r\n     */\r\n    containsKey(key: string): boolean {\r\n        return this.getKeys().includes(key);\r\n    }\r\n\r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    getKeys(): string[] {\r\n        this.logger.verbose(\"Retrieving all cache keys\");\r\n\r\n        // read cache\r\n        const cache = this.getCache();\r\n        return [ ...Object.keys(cache)];\r\n    }\r\n\r\n    /**\r\n     * Clears all cache entries created by MSAL (except tokens).\r\n     */\r\n    clear(): void {\r\n        this.logger.verbose(\"Clearing cache entries created by MSAL\");\r\n\r\n        // read inMemoryCache\r\n        const cacheKeys = this.getKeys();\r\n\r\n        // delete each element\r\n        cacheKeys.forEach(key => {\r\n            this.removeItem(key);\r\n        });\r\n        this.emitChange();\r\n    }\r\n\r\n    /**\r\n     * Initialize in memory cache from an exisiting cache vault\r\n     * @param cache - blob formatted cache (JSON)\r\n     */\r\n    static generateInMemoryCache(cache: string): InMemoryCache {\r\n        return Deserializer.deserializeAllCache(\r\n            Deserializer.deserializeJSONBlob(cache)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * retrieves the final JSON\r\n     * @param inMemoryCache - itemised cache read from the JSON\r\n     */\r\n    static generateJsonCache(inMemoryCache: InMemoryCache): JsonCache {\r\n        return Serializer.serializeAllCache(inMemoryCache);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NodeStorage } from \"./NodeStorage\";\r\nimport { StringUtils, AccountEntity, AccountInfo, Logger, ISerializableTokenCache, ICachePlugin, TokenCacheContext } from \"@azure/msal-common\";\r\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedIdTokenEntity, SerializedAppMetadataEntity, CacheKVStore } from \"./serializer/SerializerTypes\";\r\nimport { Deserializer } from \"./serializer/Deserializer\";\r\nimport { Serializer } from \"./serializer/Serializer\";\r\nimport { ITokenCache } from \"./ITokenCache\";\r\n\r\nconst defaultSerializedCache: JsonCache = {\r\n    Account: {},\r\n    IdToken: {},\r\n    AccessToken: {},\r\n    RefreshToken: {},\r\n    AppMetadata: {},\r\n};\r\n\r\n/**\r\n * In-memory token cache manager\r\n * @public\r\n */\r\nexport class TokenCache implements ISerializableTokenCache, ITokenCache {\r\n\r\n    private storage: NodeStorage;\r\n    private cacheHasChanged: boolean;\r\n    private cacheSnapshot: string;\r\n    private readonly persistence: ICachePlugin;\r\n    private logger: Logger;\r\n\r\n    constructor(storage: NodeStorage, logger: Logger, cachePlugin?: ICachePlugin) {\r\n        this.cacheHasChanged = false;\r\n        this.storage = storage;\r\n        this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\r\n        if (cachePlugin) {\r\n            this.persistence = cachePlugin;\r\n        }\r\n        this.logger = logger;\r\n    }\r\n\r\n    /**\r\n     * Set to true if cache state has changed since last time serialize or writeToPersistence was called\r\n     */\r\n    hasChanged(): boolean {\r\n        return this.cacheHasChanged;\r\n    }\r\n\r\n    /**\r\n     * Serializes in memory cache to JSON\r\n     */\r\n    serialize(): string {\r\n        this.logger.verbose(\"Serializing in-memory cache\");\r\n        let finalState = Serializer.serializeAllCache(\r\n            this.storage.getInMemoryCache() as InMemoryCache\r\n        );\r\n\r\n        // if cacheSnapshot not null or empty, merge\r\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\r\n            this.logger.verbose(\"Reading cache snapshot from disk\");\r\n            finalState = this.mergeState(\r\n                JSON.parse(this.cacheSnapshot),\r\n                finalState\r\n            );\r\n        } else {\r\n            this.logger.verbose(\"No cache snapshot to merge\");\r\n        }\r\n        this.cacheHasChanged = false;\r\n\r\n        return JSON.stringify(finalState);\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\r\n     * @param cache - blob formatted cache\r\n     */\r\n    deserialize(cache: string): void {\r\n        this.logger.verbose(\"Deserializing JSON to in-memory cache\");\r\n        this.cacheSnapshot = cache;\r\n\r\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\r\n            this.logger.verbose(\"Reading cache snapshot from disk\");\r\n            const deserializedCache = Deserializer.deserializeAllCache(\r\n                this.overlayDefaults(JSON.parse(this.cacheSnapshot))\r\n            );\r\n            this.storage.setInMemoryCache(deserializedCache);\r\n        } else {\r\n            this.logger.verbose(\"No cache snapshot to deserialize\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches the cache key-value map\r\n     */\r\n    getKVStore(): CacheKVStore {\r\n        return this.storage.getCache();\r\n    }\r\n\r\n    /**\r\n     * API that retrieves all accounts currently in cache to the user\r\n     */\r\n    async getAllAccounts(): Promise<AccountInfo[]> {\r\n\r\n        this.logger.verbose(\"getAllAccounts called\");\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistence) {\r\n                cacheContext = new TokenCacheContext(this, false);\r\n                await this.persistence.beforeCacheAccess(cacheContext);\r\n            }\r\n            return this.storage.getAllAccounts();\r\n        } finally {\r\n            if (this.persistence && cacheContext) {\r\n                await this.persistence.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId - unique identifier for an account (uid.utid)\r\n     */\r\n    async getAccountByHomeId(homeAccountId: string): Promise<AccountInfo | null> {\r\n        const allAccounts = await this.getAllAccounts();\r\n        if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {\r\n            return allAccounts.filter(accountObj => accountObj.homeAccountId === homeAccountId)[0] || null;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\r\n     */\r\n    async getAccountByLocalId(localAccountId: string): Promise<AccountInfo | null> {\r\n        const allAccounts = await this.getAllAccounts();\r\n        if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {\r\n            return allAccounts.filter(accountObj => accountObj.localAccountId === localAccountId)[0] || null;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * API to remove a specific account and the relevant data from cache\r\n     * @param account - AccountInfo passed by the user\r\n     */\r\n    async removeAccount(account: AccountInfo): Promise<void> {\r\n        this.logger.verbose(\"removeAccount called\");\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistence) {\r\n                cacheContext = new TokenCacheContext(this, true);\r\n                await this.persistence.beforeCacheAccess(cacheContext);\r\n            }\r\n            this.storage.removeAccount(AccountEntity.generateAccountCacheKey(account));\r\n        } finally {\r\n            if (this.persistence && cacheContext) {\r\n                await this.persistence.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the cache has changed state.\r\n     */\r\n    private handleChangeEvent() {\r\n        this.cacheHasChanged = true;\r\n    }\r\n\r\n    /**\r\n     * Merge in memory cache with the cache snapshot.\r\n     * @param oldState - cache before changes\r\n     * @param currentState - current cache state in the library\r\n     */\r\n    private mergeState(oldState: JsonCache, currentState: JsonCache): JsonCache {\r\n        this.logger.verbose(\"Merging in-memory cache with cache snapshot\");\r\n        const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\r\n        return this.mergeUpdates(stateAfterRemoval, currentState);\r\n    }\r\n\r\n    /**\r\n     * Deep update of oldState based on newState values\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */\r\n    private mergeUpdates(oldState: any, newState: any): JsonCache {\r\n        Object.keys(newState).forEach((newKey: string) => {\r\n            const newValue = newState[newKey];\r\n\r\n            // if oldState does not contain value but newValue does, add it\r\n            if (!oldState.hasOwnProperty(newKey)) {\r\n                if (newValue !== null) {\r\n                    oldState[newKey] = newValue;\r\n                }\r\n            } else {\r\n                // both oldState and newState contain the key, do deep update\r\n                const newValueNotNull = newValue !== null;\r\n                const newValueIsObject = typeof newValue === \"object\";\r\n                const newValueIsNotArray = !Array.isArray(newValue);\r\n                const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" && oldState[newKey] !== null;\r\n\r\n                if (newValueNotNull && newValueIsObject && newValueIsNotArray && oldStateNotUndefinedOrNull) {\r\n                    this.mergeUpdates(oldState[newKey], newValue);\r\n                } else {\r\n                    oldState[newKey] = newValue;\r\n                }\r\n            }\r\n        });\r\n\r\n        return oldState;\r\n    }\r\n\r\n    /**\r\n     * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\r\n     * oldState that are not recognized, they are left untouched.\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */\r\n    private mergeRemovals(oldState: JsonCache, newState: JsonCache): JsonCache {\r\n        this.logger.verbose(\"Remove updated entries in cache\");\r\n        const accounts = oldState.Account ? this.mergeRemovalsDict<SerializedAccountEntity>(oldState.Account, newState.Account) : oldState.Account;\r\n        const accessTokens = oldState.AccessToken ? this.mergeRemovalsDict<SerializedAccessTokenEntity>(oldState.AccessToken, newState.AccessToken) : oldState.AccessToken;\r\n        const refreshTokens = oldState.RefreshToken ? this.mergeRemovalsDict<SerializedRefreshTokenEntity>(oldState.RefreshToken, newState.RefreshToken) : oldState.RefreshToken;\r\n        const idTokens = oldState.IdToken ? this.mergeRemovalsDict<SerializedIdTokenEntity>(oldState.IdToken, newState.IdToken) : oldState.IdToken;\r\n        const appMetadata = oldState.AppMetadata ? this.mergeRemovalsDict<SerializedAppMetadataEntity>(oldState.AppMetadata, newState.AppMetadata) : oldState.AppMetadata;\r\n\r\n        return {\r\n            ...oldState,\r\n            Account: accounts,\r\n            AccessToken: accessTokens,\r\n            RefreshToken: refreshTokens,\r\n            IdToken: idTokens,\r\n            AppMetadata: appMetadata\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Helper to merge new cache with the old one\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */\r\n    private mergeRemovalsDict<T>(oldState: Record<string, T>, newState?: Record<string, T>): Record<string, T> {\r\n        const finalState = { ...oldState };\r\n        Object.keys(oldState).forEach((oldKey) => {\r\n            if (!newState || !(newState.hasOwnProperty(oldKey))) {\r\n                delete finalState[oldKey];\r\n            }\r\n        });\r\n        return finalState;\r\n    }\r\n\r\n    /**\r\n     * Helper to overlay as a part of cache merge\r\n     * @param passedInCache - cache read from the blob\r\n     */\r\n    private overlayDefaults(passedInCache: JsonCache): JsonCache {\r\n        this.logger.verbose(\"Overlaying input cache with the default cache\");\r\n        return {\r\n            Account: {\r\n                ...defaultSerializedCache.Account,\r\n                ...passedInCache.Account,\r\n            },\r\n            IdToken: {\r\n                ...defaultSerializedCache.IdToken,\r\n                ...passedInCache.IdToken,\r\n            },\r\n            AccessToken: {\r\n                ...defaultSerializedCache.AccessToken,\r\n                ...passedInCache.AccessToken,\r\n            },\r\n            RefreshToken: {\r\n                ...defaultSerializedCache.RefreshToken,\r\n                ...passedInCache.RefreshToken,\r\n            },\r\n            AppMetadata: {\r\n                ...defaultSerializedCache.AppMetadata,\r\n                ...passedInCache.AppMetadata,\r\n            },\r\n        };\r\n    }\r\n}\r\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-node\";\nexport const version = \"1.0.0-beta.6\";\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    AuthorizationCodeClient,\r\n    ClientConfiguration,\r\n    RefreshTokenClient,\r\n    AuthenticationResult,\r\n    Authority,\r\n    AuthorityFactory,\r\n    BaseAuthRequest,\r\n    SilentFlowClient,\r\n    Logger,\r\n    ServerTelemetryManager,\r\n    ServerTelemetryRequest,\r\n    CommonSilentFlowRequest,\r\n    CommonRefreshTokenRequest,\r\n    CommonAuthorizationCodeRequest,\r\n    CommonAuthorizationUrlRequest,\r\n    AuthenticationScheme,\r\n    ResponseMode,\r\n    AuthorityOptions,\r\n    OIDC_DEFAULT_SCOPES\r\n} from \"@azure/msal-common\";\r\nimport { Configuration, buildAppConfiguration } from \"../config/Configuration\";\r\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\r\nimport { NodeStorage } from \"../cache/NodeStorage\";\r\nimport { Constants as NodeConstants, ApiId } from \"../utils/Constants\";\r\nimport { TokenCache } from \"../cache/TokenCache\";\r\nimport { ClientAssertion } from \"./ClientAssertion\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\r\nimport { RefreshTokenRequest } from \"../request/RefreshTokenRequest\";\r\nimport { SilentFlowRequest } from \"../request/SilentFlowRequest\";\r\nimport { version, name } from \"../packageMetadata\";\r\n\r\n/**\r\n * Base abstract class for all ClientApplications - public and confidential\r\n * @public\r\n */\r\nexport abstract class ClientApplication {\r\n\r\n    private readonly cryptoProvider: CryptoProvider;\r\n    private tokenCache: TokenCache;\r\n\r\n    /**\r\n     * Platform storage object\r\n     */\r\n    protected storage: NodeStorage;\r\n    /**\r\n     * Logger object to log the application flow\r\n     */\r\n    protected logger: Logger;\r\n    /**\r\n     * Platform configuration initialized by the application\r\n     */\r\n    protected config: Configuration;\r\n    /**\r\n     * Client assertion passed by the user for confidential client flows\r\n     */\r\n    protected clientAssertion: ClientAssertion;\r\n    /**\r\n     * Client secret passed by the user for confidential client flows\r\n     */\r\n    protected clientSecret: string;\r\n\r\n    /**\r\n     * Constructor for the ClientApplication\r\n     */\r\n    protected constructor(configuration: Configuration) {\r\n        this.config = buildAppConfiguration(configuration);\r\n        this.cryptoProvider = new CryptoProvider();\r\n        this.logger = new Logger(this.config.system!.loggerOptions!, name, version);\r\n        this.storage = new NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider);\r\n        this.tokenCache = new TokenCache(\r\n            this.storage,\r\n            this.logger,\r\n            this.config.cache!.cachePlugin\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates the URL of the authorization request, letting the user input credentials and consent to the\r\n     * application. The URL targets the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * `acquireTokenByCode(AuthorizationCodeRequest)`.\r\n     */\r\n    async getAuthCodeUrl(request: AuthorizationUrlRequest): Promise<string> {\r\n        this.logger.info(\"getAuthCodeUrl called\");\r\n        const validRequest: CommonAuthorizationUrlRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request),\r\n            responseMode: request.responseMode || ResponseMode.QUERY,\r\n            authenticationScheme: AuthenticationScheme.BEARER\r\n        };\r\n        const authClientConfig = await this.buildOauthClientConfiguration(\r\n            validRequest.authority\r\n        );\r\n        this.logger.verbose(\"Auth client config generated\");\r\n        const authorizationCodeClient = new AuthorizationCodeClient(\r\n            authClientConfig\r\n        );\r\n        return authorizationCodeClient.getAuthCodeUrl(validRequest);\r\n    }\r\n\r\n    /**\r\n     * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\r\n     * Authorization Code flow.\r\n     *\r\n     * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\r\n     * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\r\n     * AuthorizationCodeRequest are the same.\r\n     */\r\n    async acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"acquireTokenByCode called\");\r\n        const validRequest: CommonAuthorizationCodeRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request),\r\n            authenticationScheme: AuthenticationScheme.BEARER\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByCode, validRequest.correlationId!);\r\n        try {\r\n            const authClientConfig = await this.buildOauthClientConfiguration(\r\n                validRequest.authority,\r\n                serverTelemetryManager\r\n            );\r\n            this.logger.verbose(\"Auth client config generated\");\r\n            const authorizationCodeClient = new AuthorizationCodeClient(\r\n                authClientConfig\r\n            );\r\n            return authorizationCodeClient.acquireToken(validRequest);\r\n        } catch (e) {\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Acquires a token by exchanging the refresh token provided for a new set of tokens.\r\n     *\r\n     * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\r\n     * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\r\n     * handle the caching and refreshing of tokens automatically.\r\n     */\r\n    async acquireTokenByRefreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"acquireTokenByRefreshToken called\");\r\n        const validRequest: CommonRefreshTokenRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request),\r\n            authenticationScheme: AuthenticationScheme.BEARER\r\n        };\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\r\n        try {\r\n            const refreshTokenClientConfig = await this.buildOauthClientConfiguration(\r\n                validRequest.authority,\r\n                serverTelemetryManager\r\n            );\r\n            this.logger.verbose(\"Auth client config generated\");\r\n            const refreshTokenClient = new RefreshTokenClient(\r\n                refreshTokenClientConfig\r\n            );\r\n            return refreshTokenClient.acquireToken(validRequest);\r\n        } catch (e) {\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Acquires a token silently when a user specifies the account the token is requested for.\r\n     *\r\n     * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\r\n     * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\r\n     * In case the refresh_token is expired or not found, an error is thrown\r\n     * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\r\n     */\r\n    async acquireTokenSilent(request: SilentFlowRequest): Promise<AuthenticationResult | null> {\r\n        const validRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request),\r\n            forceRefresh: request.forceRefresh || false\r\n        };\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\r\n        try {\r\n            const silentFlowClientConfig = await this.buildOauthClientConfiguration(\r\n                validRequest.authority,\r\n                serverTelemetryManager\r\n            );\r\n            const silentFlowClient = new SilentFlowClient(\r\n                silentFlowClientConfig\r\n            );\r\n            return silentFlowClient.acquireToken(validRequest);\r\n        } catch (e) {\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the token cache for the application.\r\n     */\r\n    getTokenCache(): TokenCache {\r\n        this.logger.info(\"getTokenCache called\");\r\n        return this.tokenCache;\r\n    }\r\n\r\n    /**\r\n     * Returns the logger instance\r\n     */\r\n    getLogger(): Logger {\r\n        return this.logger;\r\n    }\r\n\r\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger - Logger instance\r\n     */\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger;\r\n    }\r\n\r\n    /**\r\n     * Builds the common configuration to be passed to the common component based on the platform configurarion\r\n     * @param authority - user passed authority in configuration\r\n     * @param serverTelemetryManager - initializes servertelemetry if passed\r\n     */\r\n    protected async buildOauthClientConfiguration(authority: string, serverTelemetryManager?: ServerTelemetryManager): Promise<ClientConfiguration> {\r\n        this.logger.verbose(\"buildOauthClientConfiguration called\");\r\n        // using null assertion operator as we ensure that all config values have default values in buildConfiguration()\r\n\r\n        const discoveredAuthority = await this.createAuthority(authority);\r\n\r\n        return {\r\n            authOptions: {\r\n                clientId: this.config.auth.clientId,\r\n                authority: discoveredAuthority,\r\n                clientCapabilities: this.config.auth.clientCapabilities\r\n            },\r\n            loggerOptions: {\r\n                loggerCallback: this.config.system!.loggerOptions!\r\n                    .loggerCallback,\r\n                piiLoggingEnabled: this.config.system!.loggerOptions!\r\n                    .piiLoggingEnabled,\r\n            },\r\n            cryptoInterface: this.cryptoProvider,\r\n            networkInterface: this.config.system!.networkClient,\r\n            storageInterface: this.storage,\r\n            serverTelemetryManager: serverTelemetryManager,\r\n            clientCredentials: {\r\n                clientSecret: this.clientSecret,\r\n                clientAssertion: this.clientAssertion ? this.getClientAssertion(discoveredAuthority) : undefined,\r\n            },\r\n            libraryInfo: {\r\n                sku: NodeConstants.MSAL_SKU,\r\n                version: version,\r\n                cpu: process.arch || \"\",\r\n                os: process.platform || \"\",\r\n            },\r\n            persistencePlugin: this.config.cache!.cachePlugin,\r\n            serializableCache: this.tokenCache,\r\n        };\r\n    }\r\n\r\n    private getClientAssertion(authority: Authority): { assertion: string, assertionType: string } {\r\n        return {\r\n            assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\r\n            assertionType: NodeConstants.JWT_BEARER_ASSERTION_TYPE\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates a request with the default scopes & generates a correlationId.\r\n     * @param authRequest - BaseAuthRequest for initialization\r\n     */\r\n    protected initializeBaseRequest(authRequest: Partial<BaseAuthRequest>): BaseAuthRequest {\r\n        this.logger.verbose(\"initializeRequestScopes called\");\r\n\r\n        return {\r\n            ...authRequest,\r\n            scopes: [...((authRequest && authRequest.scopes) || []), ...OIDC_DEFAULT_SCOPES],\r\n            correlationId: authRequest && authRequest.correlationId || this.cryptoProvider.createNewGuid(),\r\n            authority: authRequest.authority || this.config.auth.authority!\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes the server telemetry payload\r\n     * @param apiId - Id for a specific request\r\n     * @param correlationId - GUID\r\n     * @param forceRefresh - boolean to indicate network call\r\n     */\r\n    protected initializeServerTelemetryManager(apiId: number, correlationId: string, forceRefresh?: boolean): ServerTelemetryManager {\r\n        const telemetryPayload: ServerTelemetryRequest = {\r\n            clientId: this.config.auth.clientId,\r\n            correlationId: correlationId,\r\n            apiId: apiId,\r\n            forceRefresh: forceRefresh || false\r\n        };\r\n\r\n        return new ServerTelemetryManager(telemetryPayload, this.storage);\r\n    }\r\n\r\n    /**\r\n     * Create authority instance. If authority not passed in request, default to authority set on the application\r\n     * object. If no authority set in application object, then default to common authority.\r\n     * @param authorityString - authority from user configuration\r\n     */\r\n    private async createAuthority(authorityString: string): Promise<Authority> {\r\n        this.logger.verbose(\"createAuthority called\");\r\n        const authorityOptions: AuthorityOptions = {\r\n            protocolMode: this.config.auth.protocolMode!,\r\n            knownAuthorities: this.config.auth.knownAuthorities!,\r\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata!,\r\n            authorityMetadata: this.config.auth.authorityMetadata!\r\n        };\r\n        return await AuthorityFactory.createDiscoveredInstance(authorityString, this.config.system!.networkClient!, this.storage, authorityOptions);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ApiId } from \"../utils/Constants\";\r\nimport {\r\n    DeviceCodeClient,\r\n    AuthenticationResult,\r\n    CommonDeviceCodeRequest,\r\n    CommonUsernamePasswordRequest,\r\n    UsernamePasswordClient\r\n} from \"@azure/msal-common\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { ClientApplication } from \"./ClientApplication\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { DeviceCodeRequest } from \"../request/DeviceCodeRequest\";\r\nimport { UsernamePasswordRequest } from \"../request/UsernamePasswordRequest\";\r\n\r\n/**\r\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\r\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\r\n * @public\r\n */\r\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\r\n    /**\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\r\n     * - authority: the authority URL for your application.\r\n     *\r\n     * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n     * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\r\n     * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\r\n     * construction.\r\n     *\r\n     * ADFS authorities are of the form https://\\{instance\\}/adfs.\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Acquires a token from the authority using OAuth2.0 device code flow.\r\n     * This flow is designed for devices that do not have access to a browser or have input constraints.\r\n     * The authorization server issues a DeviceCode object with a verification code, an end-user code,\r\n     * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\r\n     * instructed to use another device to navigate to the verification URI to input credentials.\r\n     * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\r\n     * until the end-user completes input of credentials.\r\n     */\r\n    public async acquireTokenByDeviceCode(request: DeviceCodeRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"acquireTokenByDeviceCode called\");\r\n        const validRequest: CommonDeviceCodeRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request)\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByDeviceCode, validRequest.correlationId!);\r\n        try {\r\n            const deviceCodeConfig = await this.buildOauthClientConfiguration(\r\n                validRequest.authority,\r\n                serverTelemetryManager\r\n            );\r\n            this.logger.verbose(\"Auth client config generated\");\r\n            const deviceCodeClient = new DeviceCodeClient(deviceCodeConfig);\r\n            return deviceCodeClient.acquireToken(validRequest);\r\n        } catch (e) {\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Acquires tokens with password grant by exchanging client applications username and password for credentials\r\n     *\r\n     * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\r\n     * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\r\n     * Microsoft's documentation and recommendations are at:\r\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\r\n     *\r\n     * @param request - UsenamePasswordRequest\r\n     */\r\n    async acquireTokenByUsernamePassword(request: UsernamePasswordRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"acquireTokenByUsernamePassword called\");\r\n        const validRequest: CommonUsernamePasswordRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request)\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByUsernamePassword, validRequest.correlationId!);\r\n        try {\r\n            const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(\r\n                validRequest.authority,\r\n                serverTelemetryManager\r\n            );\r\n            this.logger.verbose(\"Auth client config generated\");\r\n            const usernamePasswordClient = new UsernamePasswordClient(usernamePasswordClientConfig);\r\n            return usernamePasswordClient.acquireToken(validRequest);\r\n        } catch (e) {\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { sign } from \"jsonwebtoken\";\r\nimport { TimeUtils, ClientAuthError } from \"@azure/msal-common\";\r\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\r\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\r\nimport { JwtConstants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Client assertion of type jwt-bearer used in confidential client flows\r\n * @public\r\n */\r\nexport class ClientAssertion {\r\n\r\n    private jwt: string;\r\n    private privateKey: string;\r\n    private thumbprint: string;\r\n    private expirationTime: number;\r\n    private issuer: string;\r\n    private jwtAudience: string;\r\n    private publicCertificate: Array<string>;\r\n\r\n    /**\r\n     * Initialize the ClientAssertion class from the clientAssertion passed by the user\r\n     * @param assertion - refer https://tools.ietf.org/html/rfc7521\r\n     */\r\n    public static fromAssertion(assertion: string): ClientAssertion {\r\n        const clientAssertion = new ClientAssertion();\r\n        clientAssertion.jwt = assertion;\r\n        return clientAssertion;\r\n    }\r\n\r\n    /**\r\n     * Initialize the ClientAssertion class from the certificate passed by the user\r\n     * @param thumbprint - identifier of a certificate\r\n     * @param privateKey - secret key\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */\r\n    public static fromCertificate(thumbprint: string, privateKey: string, publicCertificate?: string): ClientAssertion {\r\n        const clientAssertion = new ClientAssertion();\r\n        clientAssertion.privateKey = privateKey;\r\n        clientAssertion.thumbprint = thumbprint;\r\n        if (publicCertificate) {\r\n            clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\r\n        }\r\n        return clientAssertion;\r\n    }\r\n\r\n    /**\r\n     * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\r\n     * @param cryptoProvider - library's crypto helper\r\n     * @param issuer - iss claim\r\n     * @param jwtAudience - aud claim\r\n     */\r\n    public getJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string) {\r\n        // if assertion was created from certificate, check if jwt is expired and create new one.\r\n        if (this.privateKey && this.thumbprint) {\r\n\r\n            if (this.jwt && !this.isExpired() && issuer === this.issuer && jwtAudience === this.jwtAudience) {\r\n                return this.jwt;\r\n            }\r\n\r\n            return this.createJwt(cryptoProvider, issuer, jwtAudience);\r\n        }\r\n\r\n        /*\r\n         * if assertion was created by caller, then we just append it. It is up to the caller to\r\n         * ensure that it contains necessary claims and that it is not expired.\r\n         */\r\n        if (this.jwt) {\r\n            return this.jwt;\r\n        }\r\n\r\n        throw ClientAuthError.createInvalidAssertionError();\r\n    }\r\n\r\n    /**\r\n     * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\r\n     */\r\n    private createJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\r\n\r\n        this.issuer = issuer;\r\n        this.jwtAudience = jwtAudience;\r\n        const issuedAt = TimeUtils.nowSeconds();\r\n        this.expirationTime = issuedAt + 600;\r\n\r\n        const header = {\r\n            [JwtConstants.ALGORITHM]: JwtConstants.RSA_256,\r\n            [JwtConstants.X5T]: EncodingUtils.base64EncodeUrl(this.thumbprint, \"hex\")\r\n        };\r\n\r\n        if (this.publicCertificate) {\r\n            Object.assign(header, {\r\n                [JwtConstants.X5C]: this.publicCertificate\r\n            });\r\n        }\r\n\r\n        const payload = {\r\n            [JwtConstants.AUDIENCE]: this.jwtAudience,\r\n            [JwtConstants.EXPIRATION_TIME]: this.expirationTime,\r\n            [JwtConstants.ISSUER]: this.issuer,\r\n            [JwtConstants.SUBJECT]: this.issuer,\r\n            [JwtConstants.NOT_BEFORE]: issuedAt,\r\n            [JwtConstants.JWT_ID]: cryptoProvider.createNewGuid()\r\n        };\r\n\r\n        this.jwt = sign(payload, this.privateKey, { header: header });\r\n        return this.jwt;\r\n    }\r\n\r\n    /**\r\n     * Utility API to check expiration\r\n     */\r\n    private isExpired(): boolean {\r\n        return this.expirationTime < TimeUtils.nowSeconds();\r\n    }\r\n\r\n    /**\r\n     * Extracts the raw certs from a given certificate string and returns them in an array.\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */\r\n    public static parseCertificate(publicCertificate: string): Array<string> {\r\n        /**\r\n         * This is regex to identify the certs in a given certificate string.\r\n         * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\r\n         * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\r\n         * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\r\n         * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\r\n         */\r\n        const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\n(.+?)\\n-----END CERTIFICATE-----/gs;\r\n        const certs: string[] = [];\r\n\r\n        let matches;\r\n        while ((matches = regexToFindCerts.exec(publicCertificate)) !== null) {\r\n            // matches[1] represents the first parens capture group in the regex.\r\n            certs.push(matches[1].replace(/\\n/, \"\"));\r\n        }\r\n\r\n        return certs;\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientApplication } from \"./ClientApplication\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { ClientAssertion } from \"./ClientAssertion\";\r\nimport { ApiId } from \"../utils/Constants\";\r\nimport {\r\n    ClientCredentialClient,\r\n    OnBehalfOfClient,\r\n    CommonClientCredentialRequest,\r\n    CommonOnBehalfOfRequest,\r\n    AuthenticationResult,\r\n    StringUtils,\r\n    ClientAuthError } from \"@azure/msal-common\";\r\nimport { IConfidentialClientApplication } from \"./IConfidentialClientApplication\";\r\nimport { OnBehalfOfRequest } from \"../request/OnBehalfOfRequest\";\r\nimport { ClientCredentialRequest } from \"../request/ClientCredentialRequest\";\r\n\r\n/**\r\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\r\n *  will configure application secrets, client certificates/assertions as applicable\r\n * @public\r\n */\r\nexport class ConfidentialClientApplication extends ClientApplication implements IConfidentialClientApplication{\r\n\r\n    /**\r\n     * Constructor for the ConfidentialClientApplication\r\n     *\r\n     * Required attributes in the Configuration object are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\r\n     * - authority: the authority URL for your application.\r\n     * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        super(configuration);\r\n        this.setClientCredential(this.config);\r\n    }\r\n\r\n    /**\r\n     * Acquires tokens from the authority for the application (not for an end user).\r\n     */\r\n    public async acquireTokenByClientCredential(request: ClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"acquireTokenByClientCredential called\");\r\n        const validRequest: CommonClientCredentialRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request)\r\n        };\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\r\n        try {\r\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(\r\n                validRequest.authority,\r\n                serverTelemetryManager\r\n            );\r\n            this.logger.verbose(\"Auth client config generated\");\r\n            const clientCredentialClient = new ClientCredentialClient(clientCredentialConfig);\r\n            return clientCredentialClient.acquireToken(validRequest);\r\n        } catch(e) {\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Acquires tokens from the authority for the application.\r\n     *\r\n     * Used in scenarios where the current app is a middle-tier service which was called with a token\r\n     * representing an end user. The current app can use the token (oboAssertion) to request another\r\n     * token to access downstream web API, on behalf of that user.\r\n     *\r\n     * The current middle-tier app has no user interaction to obtain consent.\r\n     * See how to gain consent upfront for your middle-tier app from this article.\r\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\r\n     */\r\n    public async acquireTokenOnBehalfOf(request: OnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"acquireTokenOnBehalfOf called\");\r\n        const validRequest: CommonOnBehalfOfRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request)\r\n        };\r\n        const clientCredentialConfig = await this.buildOauthClientConfiguration(\r\n            validRequest.authority\r\n        );\r\n        this.logger.verbose(\"Auth client config generated\");\r\n        const oboClient = new OnBehalfOfClient(clientCredentialConfig);\r\n        return oboClient.acquireToken(validRequest);\r\n    }\r\n\r\n    private setClientCredential(configuration: Configuration): void {\r\n\r\n        const clientSecretNotEmpty = !StringUtils.isEmpty(configuration.auth.clientSecret!);\r\n        const clientAssertionNotEmpty = !StringUtils.isEmpty(configuration.auth.clientAssertion!);\r\n        const certificate = configuration.auth.clientCertificate!;\r\n        const certificateNotEmpty = !StringUtils.isEmpty(certificate.thumbprint) || !StringUtils.isEmpty(certificate.privateKey);\r\n\r\n        // Check that at most one credential is set on the application\r\n        if (\r\n            clientSecretNotEmpty && clientAssertionNotEmpty ||\r\n            clientAssertionNotEmpty && certificateNotEmpty ||\r\n            clientSecretNotEmpty && certificateNotEmpty) {\r\n            throw ClientAuthError.createInvalidCredentialError();\r\n        }\r\n\r\n        if (clientSecretNotEmpty) {\r\n            this.clientSecret = configuration.auth.clientSecret!;\r\n            return;\r\n        }\r\n\r\n        if (clientAssertionNotEmpty) {\r\n            this.clientAssertion = ClientAssertion.fromAssertion(configuration.auth.clientAssertion!);\r\n            return;\r\n        }\r\n\r\n        if (!certificateNotEmpty) {\r\n            throw ClientAuthError.createInvalidCredentialError();\r\n        } else {\r\n            this.clientAssertion = ClientAssertion.fromCertificate(certificate.thumbprint, certificate.privateKey, configuration.auth.clientCertificate?.x5c);\r\n        }\r\n    }\r\n}\r\n"],"names":["undefined","HttpMethod","RANDOM_OCTET_SIZE","Hash","SHA256","CharSet","CV_CHARSET","Constants","MSAL_SKU","JWT_BEARER_ASSERTION_TYPE","ApiId","JwtConstants","ALGORITHM","RSA_256","X5T","X5C","AUDIENCE","EXPIRATION_TIME","ISSUER","SUBJECT","NOT_BEFORE","JWT_ID","HttpClient","sendGetRequestAsync","url","options","request","method","GET","headers","validateStatus","axios","response","body","data","status","sendPostRequestAsync","POST","NetworkUtils","getNetworkClient","DEFAULT_AUTH_OPTIONS","clientId","authority","DEFAULT_AUTHORITY","clientSecret","clientAssertion","clientCertificate","thumbprint","privateKey","x5c","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","clientCapabilities","protocolMode","ProtocolMode","AAD","DEFAULT_CACHE_OPTIONS","DEFAULT_LOGGER_OPTIONS","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","DEFAULT_SYSTEM_OPTIONS","loggerOptions","networkClient","buildAppConfiguration","auth","cache","system","GuidGenerator","generateGuid","uuidv4","isGuid","guid","regexGuid","test","EncodingUtils","base64Encode","str","encoding","Buffer","from","toString","base64EncodeUrl","replace","base64Decode","base64Str","base64DecodeUrl","length","PkceGenerator","generatePkceCodes","verifier","generateCodeVerifier","challenge","generateCodeChallengeFromVerifier","buffer","crypto","randomBytes","bufferToCVString","codeVerifier","sha256","createHash","update","digest","charArr","i","byteLength","index","push","join","CryptoProvider","pkceGenerator","createNewGuid","input","getPublicKeyThumbprint","Error","signJwt","Deserializer","deserializeJSONBlob","jsonFile","deserializedCache","StringUtils","isEmpty","JSON","parse","deserializeAccounts","accounts","accountObjects","Object","keys","map","key","serializedAcc","mappedAcc","homeAccountId","home_account_id","environment","realm","localAccountId","local_account_id","username","authorityType","authority_type","name","clientInfo","client_info","lastModificationTime","last_modification_time","lastModificationApp","last_modification_app","account","AccountEntity","CacheManager","toObject","deserializeIdTokens","idTokens","idObjects","serializedIdT","mappedIdT","credentialType","credential_type","client_id","secret","idToken","IdTokenEntity","deserializeAccessTokens","accessTokens","atObjects","serializedAT","mappedAT","target","cachedAt","cached_at","expiresOn","expires_on","extendedExpiresOn","extended_expires_on","refreshOn","refresh_on","keyId","key_id","tokenType","token_type","accessToken","AccessTokenEntity","deserializeRefreshTokens","refreshTokens","rtObjects","serializedRT","mappedRT","familyId","family_id","refreshToken","RefreshTokenEntity","deserializeAppMetadata","appMetadata","appMetadataObjects","serializedAmdt","mappedAmd","amd","AppMetadataEntity","deserializeAllCache","jsonCache","Account","IdToken","AccessToken","RefreshToken","AppMetadata","Serializer","serializeJSONBlob","stringify","serializeAccounts","accCache","accountEntity","serializeIdTokens","idTCache","idTEntity","serializeAccessTokens","atCache","atEntity","serializeRefreshTokens","rtCache","rtEntity","serializeAppMetadata","amdtCache","amdtEntity","serializeAllCache","inMemCache","NodeStorage","logger","cryptoImpl","registerChangeEmitter","func","changeEmitters","emitChange","forEach","call","cacheToInMemoryCache","inMemoryCache","inMemoryCacheToCache","getCache","getInMemoryCache","verbose","setInMemoryCache","setCache","getItem","verbosePii","setItem","value","getAccount","accountKey","isAccountEntity","setAccount","generateAccountKey","getIdTokenCredential","idTokenKey","isIdTokenEntity","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","isAccessTokenEntity","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","isRefreshTokenEntity","setRefreshTokenCredential","getAppMetadata","appMetadataKey","isAppMetadataEntity","setAppMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetrykey","serverTelemetryEntity","ServerTelemetryEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetryKey","serverTelemetry","getAuthorityMetadata","authorityMetadataEntity","AuthorityMetadataEntity","isAuthorityMetadataEntity","getAuthorityMetadataKeys","getKeys","filter","isAuthorityMetadata","setAuthorityMetadata","metadata","getThrottlingCache","throttlingCacheKey","throttlingCache","ThrottlingEntity","isThrottlingEntity","setThrottlingCache","removeItem","result","containsKey","includes","clear","cacheKeys","generateInMemoryCache","generateJsonCache","defaultSerializedCache","TokenCache","storage","cachePlugin","cacheHasChanged","handleChangeEvent","bind","persistence","hasChanged","serialize","finalState","cacheSnapshot","mergeState","deserialize","overlayDefaults","getKVStore","getAllAccounts","cacheContext","TokenCacheContext","beforeCacheAccess","afterCacheAccess","getAccountByHomeId","allAccounts","accountObj","getAccountByLocalId","removeAccount","generateAccountCacheKey","oldState","currentState","stateAfterRemoval","mergeRemovals","mergeUpdates","newState","newKey","newValue","hasOwnProperty","newValueNotNull","newValueIsObject","newValueIsNotArray","Array","isArray","oldStateNotUndefinedOrNull","mergeRemovalsDict","oldKey","passedInCache","version","ClientApplication","configuration","config","cryptoProvider","Logger","tokenCache","getAuthCodeUrl","info","validRequest","initializeBaseRequest","responseMode","ResponseMode","QUERY","authenticationScheme","AuthenticationScheme","BEARER","buildOauthClientConfiguration","authClientConfig","authorizationCodeClient","AuthorizationCodeClient","acquireTokenByCode","serverTelemetryManager","initializeServerTelemetryManager","correlationId","acquireToken","cacheFailedRequest","acquireTokenByRefreshToken","refreshTokenClientConfig","refreshTokenClient","RefreshTokenClient","acquireTokenSilent","forceRefresh","silentFlowClientConfig","silentFlowClient","SilentFlowClient","getTokenCache","getLogger","setLogger","createAuthority","discoveredAuthority","authOptions","cryptoInterface","networkInterface","storageInterface","clientCredentials","getClientAssertion","libraryInfo","sku","NodeConstants","cpu","process","arch","os","platform","persistencePlugin","serializableCache","assertion","getJwt","tokenEndpoint","assertionType","authRequest","scopes","OIDC_DEFAULT_SCOPES","apiId","telemetryPayload","ServerTelemetryManager","authorityString","authorityOptions","AuthorityFactory","createDiscoveredInstance","PublicClientApplication","acquireTokenByDeviceCode","deviceCodeConfig","deviceCodeClient","DeviceCodeClient","acquireTokenByUsernamePassword","usernamePasswordClientConfig","usernamePasswordClient","UsernamePasswordClient","ClientAssertion","fromAssertion","jwt","fromCertificate","publicCertificate","parseCertificate","issuer","jwtAudience","isExpired","createJwt","ClientAuthError","createInvalidAssertionError","issuedAt","TimeUtils","nowSeconds","expirationTime","header","assign","payload","sign","regexToFindCerts","certs","matches","exec","ConfidentialClientApplication","setClientCredential","acquireTokenByClientCredential","skipCache","clientCredentialConfig","clientCredentialClient","ClientCredentialClient","acquireTokenOnBehalfOf","oboClient","OnBehalfOfClient","clientSecretNotEmpty","clientAssertionNotEmpty","certificate","certificateNotEmpty","createInvalidCredentialError"],"mappings":"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"}